// this is generated
module windowskits.build_10_0_17763_0.d3d11;

import core.sys.windows.windef;
import core.sys.windows.com;
public import windowskits.build_10_0_17763_0.dxgi;
public import windowskits.build_10_0_17763_0.d3dcommon;

extern(Windows){

alias IID = GUID;

    struct D3D11_AUTHENTICATED_PROTECTION_FLAGS
    {
        UINT Value;
    }
alias D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;
alias D3D11_PRIMITIVE = D3D_PRIMITIVE;
alias D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;
alias D3D11_RECT = RECT;
alias APP_DEPRECATED_HRESULT = HRESULT;
alias D3D11_AES_CTR_IV = _D3D11_AES_CTR_IV;
alias D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT;
alias PFN_D3D11_CREATE_DEVICE = void*;
alias PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = void*;
immutable __REQUIRED_RPCNDR_H_VERSION__ = 500;
immutable __REQUIRED_RPCSAL_H_VERSION__ = 100;
immutable D3D11_16BIT_INDEX_STRIP_CUT_VALUE = ( 0xffff );
immutable D3D11_32BIT_INDEX_STRIP_CUT_VALUE = ( 0xffffffff );
immutable D3D11_8BIT_INDEX_STRIP_CUT_VALUE = ( 0xff );
immutable D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
immutable D3D11_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
immutable D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
immutable D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
immutable D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
immutable D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
immutable D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
immutable D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
immutable D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
immutable D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
immutable D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
immutable D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
immutable D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
immutable D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( -10 );
immutable D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( -8 );
immutable D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
immutable D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
immutable D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
immutable D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
immutable D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
immutable D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
immutable D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
immutable D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
immutable D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
immutable D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
immutable D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
immutable D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
immutable D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
immutable D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
immutable D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
immutable D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
immutable D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
immutable D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
immutable D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
immutable D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
immutable D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
immutable D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
immutable D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
immutable D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
immutable D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
immutable D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
immutable D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
immutable D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
immutable D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
immutable D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
immutable D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
immutable D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
immutable D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
immutable D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
immutable D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
immutable D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
immutable D3D11_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
immutable D3D11_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
immutable D3D11_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
immutable D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
immutable D3D11_CS_TGSM_REGISTER_COUNT = ( 8192 );
immutable D3D11_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
immutable D3D11_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
immutable D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
immutable D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
immutable D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
immutable D3D11_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
immutable D3D11_CS_THREADID_REGISTER_COUNT = ( 1 );
immutable D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
immutable D3D11_CS_THREAD_GROUP_MAX_X = ( 1024 );
immutable D3D11_CS_THREAD_GROUP_MAX_Y = ( 1024 );
immutable D3D11_CS_THREAD_GROUP_MAX_Z = ( 64 );
immutable D3D11_CS_THREAD_GROUP_MIN_X = ( 1 );
immutable D3D11_CS_THREAD_GROUP_MIN_Y = ( 1 );
immutable D3D11_CS_THREAD_GROUP_MIN_Z = ( 1 );
immutable D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
immutable D3D11_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
immutable D3D11_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
immutable D3D11_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
immutable D3D11_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
immutable D3D11_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
immutable D3D11_DEFAULT_DEPTH_BIAS = ( 0 );
immutable D3D11_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
immutable D3D11_DEFAULT_MAX_ANISOTROPY = ( 16 );
immutable D3D11_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
immutable D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
immutable D3D11_DEFAULT_SAMPLE_MASK = ( 0xffffffff );
immutable D3D11_DEFAULT_SCISSOR_ENDX = ( 0 );
immutable D3D11_DEFAULT_SCISSOR_ENDY = ( 0 );
immutable D3D11_DEFAULT_SCISSOR_STARTX = ( 0 );
immutable D3D11_DEFAULT_SCISSOR_STARTY = ( 0 );
immutable D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
immutable D3D11_DEFAULT_STENCIL_READ_MASK = ( 0xff );
immutable D3D11_DEFAULT_STENCIL_REFERENCE = ( 0 );
immutable D3D11_DEFAULT_STENCIL_WRITE_MASK = ( 0xff );
immutable D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
immutable D3D11_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
immutable D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
immutable D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
immutable D3D11_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
immutable D3D11_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
immutable D3D11_DEFAULT_VIEWPORT_WIDTH = ( 0 );
immutable D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
immutable D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
immutable D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
immutable D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
immutable D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
immutable D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_DS_OUTPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
immutable D3D11_FLOAT32_MAX = ( 3.402823466e+38f );
immutable D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
immutable D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
immutable D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
immutable D3D11_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
immutable D3D11_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
immutable D3D11_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
immutable D3D11_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
immutable D3D11_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
immutable D3D11_FTOI_INSTRUCTION_MIN_INPUT = ( -2147483648.999f );
immutable D3D11_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
immutable D3D11_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
immutable D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
immutable D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
immutable D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
immutable D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_GS_INPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_GS_INPUT_REGISTER_VERTICES = ( 32 );
immutable D3D11_GS_MAX_INSTANCE_COUNT = ( 32 );
immutable D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
immutable D3D11_GS_OUTPUT_ELEMENTS = ( 32 );
immutable D3D11_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_GS_OUTPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
immutable D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
immutable D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
immutable D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
immutable D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
immutable D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
immutable D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
immutable D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
immutable D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
immutable D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
immutable D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
immutable D3D11_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
immutable D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
immutable D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
immutable D3D11_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
immutable D3D11_IA_VERTEX_ID_BIT_COUNT = ( 32 );
immutable D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
immutable D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
immutable D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
immutable D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( 0xffffffff );
immutable D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( 0xffffffff );
immutable D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( 0xffffffff );
immutable D3D11_KEEP_UNORDERED_ACCESS_VIEWS = ( 0xffffffff );
immutable D3D11_LINEAR_GAMMA = ( 1.0f );
immutable D3D11_MAJOR_VERSION = ( 11 );
immutable D3D11_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
immutable D3D11_MAX_DEPTH = ( 1.0f );
immutable D3D11_MAX_MAXANISOTROPY = ( 16 );
immutable D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
immutable D3D11_MAX_POSITION_VALUE = ( 3.402823466e+34f );
immutable D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
immutable D3D11_MINOR_VERSION = ( 0 );
immutable D3D11_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
immutable D3D11_MIN_DEPTH = ( 0.0f );
immutable D3D11_MIN_MAXANISOTROPY = ( 0 );
immutable D3D11_MIP_LOD_BIAS_MAX = ( 15.99f );
immutable D3D11_MIP_LOD_BIAS_MIN = ( -16.0f );
immutable D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
immutable D3D11_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
immutable D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
immutable D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
immutable D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
immutable D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
immutable D3D11_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_PS_CS_UAV_REGISTER_COUNT = ( 8 );
immutable D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
immutable D3D11_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_PS_FRONTFACING_DEFAULT_VALUE = ( 0xffffffff );
immutable D3D11_PS_FRONTFACING_FALSE_VALUE = ( 0 );
immutable D3D11_PS_FRONTFACING_TRUE_VALUE = ( 0xffffffff );
immutable D3D11_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_PS_INPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
immutable D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
immutable D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
immutable D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
immutable D3D11_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_PS_OUTPUT_REGISTER_COUNT = ( 8 );
immutable D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
immutable D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
immutable D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
immutable D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
immutable D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
immutable D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
immutable D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
immutable D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
immutable D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
immutable D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
immutable D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
immutable D3D11_REQ_MAXANISOTROPY = ( 16 );
immutable D3D11_REQ_MIP_LEVELS = ( 15 );
immutable D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
immutable D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
immutable D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
immutable D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
immutable D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
immutable D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
immutable D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
immutable D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
immutable D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
immutable D3D11_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
immutable D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
immutable D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
immutable D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
immutable D3D11_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
immutable D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
immutable D3D11_SHADER_MAJOR_VERSION = ( 5 );
immutable D3D11_SHADER_MAX_INSTANCES = ( 65535 );
immutable D3D11_SHADER_MAX_INTERFACES = ( 253 );
immutable D3D11_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
immutable D3D11_SHADER_MAX_TYPES = ( 65535 );
immutable D3D11_SHADER_MINOR_VERSION = ( 0 );
immutable D3D11_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
immutable D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
immutable D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
immutable D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
immutable D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
immutable D3D11_SO_BUFFER_SLOT_COUNT = ( 4 );
immutable D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( 0xffffffff );
immutable D3D11_SO_NO_RASTERIZED_STREAM = ( 0xffffffff );
immutable D3D11_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
immutable D3D11_SO_STREAM_COUNT = ( 4 );
immutable D3D11_SPEC_DATE_DAY = ( 16 );
immutable D3D11_SPEC_DATE_MONTH = ( 05 );
immutable D3D11_SPEC_DATE_YEAR = ( 2011 );
immutable D3D11_SPEC_VERSION = ( 1.07 );
immutable D3D11_SRGB_GAMMA = ( 2.2f );
immutable D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
immutable D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
immutable D3D11_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
immutable D3D11_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
immutable D3D11_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
immutable D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
immutable D3D11_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
immutable D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
immutable D3D11_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
immutable D3D11_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
immutable D3D11_STANDARD_VECTOR_SIZE = ( 4 );
immutable D3D11_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
immutable D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
immutable D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
immutable D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
immutable D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
immutable D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
immutable D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
immutable D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
immutable D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
immutable D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
immutable D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
immutable D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
immutable D3D11_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
immutable D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
immutable D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
immutable D3D11_VIEWPORT_BOUNDS_MAX = ( 32767 );
immutable D3D11_VIEWPORT_BOUNDS_MIN = ( -32768 );
immutable D3D11_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_VS_INPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
immutable D3D11_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
immutable D3D11_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
immutable D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
immutable D3D11_VS_OUTPUT_REGISTER_COUNT = ( 32 );
immutable D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
immutable D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
immutable D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
immutable D3D11_1_UAV_SLOT_COUNT = ( 64 );
immutable D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
immutable D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = ( 4 );
immutable D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
immutable _FACD3D11 = ( 0x87c );
immutable _FACD3D11DEBUG = ( ( _FACD3D11 + 1 )  );
immutable D3D11_APPEND_ALIGNED_ELEMENT = ( 0xffffffff );
immutable D3D11_FILTER_REDUCTION_TYPE_MASK = ( 0x3 );
immutable D3D11_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
immutable D3D11_FILTER_TYPE_MASK = ( 0x3 );
immutable D3D11_MIN_FILTER_SHIFT = ( 4 );
immutable D3D11_MAG_FILTER_SHIFT = ( 2 );
immutable D3D11_MIP_FILTER_SHIFT = ( 0 );
immutable D3D11_COMPARISON_FILTERING_BIT = ( 0x80 );
immutable D3D11_ANISOTROPIC_FILTERING_BIT = ( 0x40 );
immutable D3D11_SDK_VERSION = ( 7 );

enum D3D11_INPUT_CLASSIFICATION {
    D3D11_INPUT_PER_VERTEX_DATA = 0,
    D3D11_INPUT_PER_INSTANCE_DATA = 1,
}

enum D3D11_FILL_MODE {
    D3D11_FILL_WIREFRAME = 2,
    D3D11_FILL_SOLID = 3,
}

enum D3D11_CULL_MODE {
    D3D11_CULL_NONE = 1,
    D3D11_CULL_FRONT = 2,
    D3D11_CULL_BACK = 3,
}

enum D3D11_RESOURCE_DIMENSION {
    D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
    D3D11_RESOURCE_DIMENSION_BUFFER = 1,
    D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
    D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
    D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4,
}

enum D3D11_DSV_DIMENSION {
    D3D11_DSV_DIMENSION_UNKNOWN = 0,
    D3D11_DSV_DIMENSION_TEXTURE1D = 1,
    D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
    D3D11_DSV_DIMENSION_TEXTURE2D = 3,
    D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
    D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
    D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6,
}

enum D3D11_RTV_DIMENSION {
    D3D11_RTV_DIMENSION_UNKNOWN = 0,
    D3D11_RTV_DIMENSION_BUFFER = 1,
    D3D11_RTV_DIMENSION_TEXTURE1D = 2,
    D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_RTV_DIMENSION_TEXTURE2D = 4,
    D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
    D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
    D3D11_RTV_DIMENSION_TEXTURE3D = 8,
}

enum D3D11_UAV_DIMENSION {
    D3D11_UAV_DIMENSION_UNKNOWN = 0,
    D3D11_UAV_DIMENSION_BUFFER = 1,
    D3D11_UAV_DIMENSION_TEXTURE1D = 2,
    D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
    D3D11_UAV_DIMENSION_TEXTURE2D = 4,
    D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
    D3D11_UAV_DIMENSION_TEXTURE3D = 8,
}

enum D3D11_USAGE {
    D3D11_USAGE_DEFAULT = 0,
    D3D11_USAGE_IMMUTABLE = 1,
    D3D11_USAGE_DYNAMIC = 2,
    D3D11_USAGE_STAGING = 3,
}

enum D3D11_BIND_FLAG {
    D3D11_BIND_VERTEX_BUFFER = 1,
    D3D11_BIND_INDEX_BUFFER = 2,
    D3D11_BIND_CONSTANT_BUFFER = 4,
    D3D11_BIND_SHADER_RESOURCE = 8,
    D3D11_BIND_STREAM_OUTPUT = 16,
    D3D11_BIND_RENDER_TARGET = 32,
    D3D11_BIND_DEPTH_STENCIL = 64,
    D3D11_BIND_UNORDERED_ACCESS = 128,
    D3D11_BIND_DECODER = 512,
    D3D11_BIND_VIDEO_ENCODER = 1024,
}

enum D3D11_CPU_ACCESS_FLAG {
    D3D11_CPU_ACCESS_WRITE = 65536,
    D3D11_CPU_ACCESS_READ = 131072,
}

enum D3D11_RESOURCE_MISC_FLAG {
    D3D11_RESOURCE_MISC_GENERATE_MIPS = 1,
    D3D11_RESOURCE_MISC_SHARED = 2,
    D3D11_RESOURCE_MISC_TEXTURECUBE = 4,
    D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 16,
    D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 32,
    D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 64,
    D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 128,
    D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 256,
    D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 512,
    D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 2048,
    D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 4096,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 8192,
    D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 16384,
    D3D11_RESOURCE_MISC_GUARDED = 32768,
    D3D11_RESOURCE_MISC_TILE_POOL = 131072,
    D3D11_RESOURCE_MISC_TILED = 262144,
    D3D11_RESOURCE_MISC_HW_PROTECTED = 524288,
}

enum D3D11_MAP {
    D3D11_MAP_READ = 1,
    D3D11_MAP_WRITE = 2,
    D3D11_MAP_READ_WRITE = 3,
    D3D11_MAP_WRITE_DISCARD = 4,
    D3D11_MAP_WRITE_NO_OVERWRITE = 5,
}

enum D3D11_MAP_FLAG {
    D3D11_MAP_FLAG_DO_NOT_WAIT = 1048576,
}

enum D3D11_RAISE_FLAG {
    D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = 1,
}

enum D3D11_CLEAR_FLAG {
    D3D11_CLEAR_DEPTH = 1,
    D3D11_CLEAR_STENCIL = 2,
}

enum D3D11_COMPARISON_FUNC {
    D3D11_COMPARISON_NEVER = 1,
    D3D11_COMPARISON_LESS = 2,
    D3D11_COMPARISON_EQUAL = 3,
    D3D11_COMPARISON_LESS_EQUAL = 4,
    D3D11_COMPARISON_GREATER = 5,
    D3D11_COMPARISON_NOT_EQUAL = 6,
    D3D11_COMPARISON_GREATER_EQUAL = 7,
    D3D11_COMPARISON_ALWAYS = 8,
}

enum D3D11_DEPTH_WRITE_MASK {
    D3D11_DEPTH_WRITE_MASK_ZERO = 0,
    D3D11_DEPTH_WRITE_MASK_ALL = 1,
}

enum D3D11_STENCIL_OP {
    D3D11_STENCIL_OP_KEEP = 1,
    D3D11_STENCIL_OP_ZERO = 2,
    D3D11_STENCIL_OP_REPLACE = 3,
    D3D11_STENCIL_OP_INCR_SAT = 4,
    D3D11_STENCIL_OP_DECR_SAT = 5,
    D3D11_STENCIL_OP_INVERT = 6,
    D3D11_STENCIL_OP_INCR = 7,
    D3D11_STENCIL_OP_DECR = 8,
}

enum D3D11_BLEND {
    D3D11_BLEND_ZERO = 1,
    D3D11_BLEND_ONE = 2,
    D3D11_BLEND_SRC_COLOR = 3,
    D3D11_BLEND_INV_SRC_COLOR = 4,
    D3D11_BLEND_SRC_ALPHA = 5,
    D3D11_BLEND_INV_SRC_ALPHA = 6,
    D3D11_BLEND_DEST_ALPHA = 7,
    D3D11_BLEND_INV_DEST_ALPHA = 8,
    D3D11_BLEND_DEST_COLOR = 9,
    D3D11_BLEND_INV_DEST_COLOR = 10,
    D3D11_BLEND_SRC_ALPHA_SAT = 11,
    D3D11_BLEND_BLEND_FACTOR = 14,
    D3D11_BLEND_INV_BLEND_FACTOR = 15,
    D3D11_BLEND_SRC1_COLOR = 16,
    D3D11_BLEND_INV_SRC1_COLOR = 17,
    D3D11_BLEND_SRC1_ALPHA = 18,
    D3D11_BLEND_INV_SRC1_ALPHA = 19,
}

enum D3D11_BLEND_OP {
    D3D11_BLEND_OP_ADD = 1,
    D3D11_BLEND_OP_SUBTRACT = 2,
    D3D11_BLEND_OP_REV_SUBTRACT = 3,
    D3D11_BLEND_OP_MIN = 4,
    D3D11_BLEND_OP_MAX = 5,
}

enum D3D11_COLOR_WRITE_ENABLE {
    D3D11_COLOR_WRITE_ENABLE_RED = 1,
    D3D11_COLOR_WRITE_ENABLE_GREEN = 2,
    D3D11_COLOR_WRITE_ENABLE_BLUE = 4,
    D3D11_COLOR_WRITE_ENABLE_ALPHA = 8,
    D3D11_COLOR_WRITE_ENABLE_ALL = 15,
}

enum D3D11_TEXTURECUBE_FACE {
    D3D11_TEXTURECUBE_FACE_POSITIVE_X = 0,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_X = 1,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Y = 2,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = 3,
    D3D11_TEXTURECUBE_FACE_POSITIVE_Z = 4,
    D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = 5,
}

enum D3D11_BUFFEREX_SRV_FLAG {
    D3D11_BUFFEREX_SRV_FLAG_RAW = 1,
}

enum D3D11_DSV_FLAG {
    D3D11_DSV_READ_ONLY_DEPTH = 1,
    D3D11_DSV_READ_ONLY_STENCIL = 2,
}

enum D3D11_BUFFER_UAV_FLAG {
    D3D11_BUFFER_UAV_FLAG_RAW = 1,
    D3D11_BUFFER_UAV_FLAG_APPEND = 2,
    D3D11_BUFFER_UAV_FLAG_COUNTER = 4,
}

enum D3D11_FILTER {
    D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
    D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 1,
    D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
    D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 5,
    D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 16,
    D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 20,
    D3D11_FILTER_MIN_MAG_MIP_LINEAR = 21,
    D3D11_FILTER_ANISOTROPIC = 85,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 128,
    D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
    D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
    D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
    D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
    D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 149,
    D3D11_FILTER_COMPARISON_ANISOTROPIC = 213,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 256,
    D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
    D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
    D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
    D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
    D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 277,
    D3D11_FILTER_MINIMUM_ANISOTROPIC = 341,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 384,
    D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
    D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
    D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
    D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
    D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
    D3D11_FILTER_MAXIMUM_ANISOTROPIC = 469,
}

enum D3D11_FILTER_TYPE {
    D3D11_FILTER_TYPE_POINT = 0,
    D3D11_FILTER_TYPE_LINEAR = 1,
}

enum D3D11_FILTER_REDUCTION_TYPE {
    D3D11_FILTER_REDUCTION_TYPE_STANDARD = 0,
    D3D11_FILTER_REDUCTION_TYPE_COMPARISON = 1,
    D3D11_FILTER_REDUCTION_TYPE_MINIMUM = 2,
    D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = 3,
}

enum D3D11_TEXTURE_ADDRESS_MODE {
    D3D11_TEXTURE_ADDRESS_WRAP = 1,
    D3D11_TEXTURE_ADDRESS_MIRROR = 2,
    D3D11_TEXTURE_ADDRESS_CLAMP = 3,
    D3D11_TEXTURE_ADDRESS_BORDER = 4,
    D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5,
}

enum D3D11_FORMAT_SUPPORT {
    D3D11_FORMAT_SUPPORT_BUFFER = 1,
    D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = 2,
    D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = 4,
    D3D11_FORMAT_SUPPORT_SO_BUFFER = 8,
    D3D11_FORMAT_SUPPORT_TEXTURE1D = 16,
    D3D11_FORMAT_SUPPORT_TEXTURE2D = 32,
    D3D11_FORMAT_SUPPORT_TEXTURE3D = 64,
    D3D11_FORMAT_SUPPORT_TEXTURECUBE = 128,
    D3D11_FORMAT_SUPPORT_SHADER_LOAD = 256,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = 512,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = 1024,
    D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = 2048,
    D3D11_FORMAT_SUPPORT_MIP = 4096,
    D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = 8192,
    D3D11_FORMAT_SUPPORT_RENDER_TARGET = 16384,
    D3D11_FORMAT_SUPPORT_BLENDABLE = 32768,
    D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = 65536,
    D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = 131072,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = 262144,
    D3D11_FORMAT_SUPPORT_DISPLAY = 524288,
    D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = 1048576,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = 2097152,
    D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = 4194304,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER = 8388608,
    D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = 16777216,
    D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = 33554432,
    D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = 67108864,
    D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = 134217728,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = 268435456,
    D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = 536870912,
    D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = 1073741824,
}

enum D3D11_FORMAT_SUPPORT2 {
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = 1,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = 2,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = 8,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
    D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = 64,
    D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = 128,
    D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = 256,
    D3D11_FORMAT_SUPPORT2_TILED = 512,
    D3D11_FORMAT_SUPPORT2_SHAREABLE = 1024,
    D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = 16384,
}

enum D3D11_ASYNC_GETDATA_FLAG {
    D3D11_ASYNC_GETDATA_DONOTFLUSH = 1,
}

enum D3D11_QUERY {
    D3D11_QUERY_EVENT = 0,
    D3D11_QUERY_OCCLUSION = 1,
    D3D11_QUERY_TIMESTAMP = 2,
    D3D11_QUERY_TIMESTAMP_DISJOINT = 3,
    D3D11_QUERY_PIPELINE_STATISTICS = 4,
    D3D11_QUERY_OCCLUSION_PREDICATE = 5,
    D3D11_QUERY_SO_STATISTICS = 6,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE = 7,
    D3D11_QUERY_SO_STATISTICS_STREAM0 = 8,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = 9,
    D3D11_QUERY_SO_STATISTICS_STREAM1 = 10,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = 11,
    D3D11_QUERY_SO_STATISTICS_STREAM2 = 12,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = 13,
    D3D11_QUERY_SO_STATISTICS_STREAM3 = 14,
    D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = 15,
}

enum D3D11_QUERY_MISC_FLAG {
    D3D11_QUERY_MISC_PREDICATEHINT = 1,
}

enum D3D11_COUNTER {
    D3D11_COUNTER_DEVICE_DEPENDENT_0 = 1073741824,
}

enum D3D11_COUNTER_TYPE {
    D3D11_COUNTER_TYPE_FLOAT32 = 0,
    D3D11_COUNTER_TYPE_UINT16 = 1,
    D3D11_COUNTER_TYPE_UINT32 = 2,
    D3D11_COUNTER_TYPE_UINT64 = 3,
}

enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS {
    D3D11_STANDARD_MULTISAMPLE_PATTERN = -1,
    D3D11_CENTER_MULTISAMPLE_PATTERN = -2,
}

enum D3D11_DEVICE_CONTEXT_TYPE {
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
    D3D11_DEVICE_CONTEXT_DEFERRED = 1,
}

enum D3D11_FEATURE {
    D3D11_FEATURE_THREADING = 0,
    D3D11_FEATURE_DOUBLES = 1,
    D3D11_FEATURE_FORMAT_SUPPORT = 2,
    D3D11_FEATURE_FORMAT_SUPPORT2 = 3,
    D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = 4,
    D3D11_FEATURE_D3D11_OPTIONS = 5,
    D3D11_FEATURE_ARCHITECTURE_INFO = 6,
    D3D11_FEATURE_D3D9_OPTIONS = 7,
    D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = 8,
    D3D11_FEATURE_D3D9_SHADOW_SUPPORT = 9,
    D3D11_FEATURE_D3D11_OPTIONS1 = 10,
    D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = 11,
    D3D11_FEATURE_MARKER_SUPPORT = 12,
    D3D11_FEATURE_D3D9_OPTIONS1 = 13,
    D3D11_FEATURE_D3D11_OPTIONS2 = 14,
    D3D11_FEATURE_D3D11_OPTIONS3 = 15,
    D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
    D3D11_FEATURE_D3D11_OPTIONS4 = 17,
    D3D11_FEATURE_SHADER_CACHE = 18,
    D3D11_FEATURE_D3D11_OPTIONS5 = 19,
}

enum D3D11_SHADER_MIN_PRECISION_SUPPORT {
    D3D11_SHADER_MIN_PRECISION_10_BIT = 1,
    D3D11_SHADER_MIN_PRECISION_16_BIT = 2,
}

enum D3D11_TILED_RESOURCES_TIER {
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0,
    D3D11_TILED_RESOURCES_TIER_1 = 1,
    D3D11_TILED_RESOURCES_TIER_2 = 2,
    D3D11_TILED_RESOURCES_TIER_3 = 3,
}

enum D3D11_CONSERVATIVE_RASTERIZATION_TIER {
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = 1,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = 2,
    D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = 3,
}

enum D3D11_SHADER_CACHE_SUPPORT_FLAGS {
    D3D11_SHADER_CACHE_SUPPORT_NONE = 0,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 1,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 2,
}

enum D3D11_SHARED_RESOURCE_TIER {
    D3D11_SHARED_RESOURCE_TIER_0 = 0,
    D3D11_SHARED_RESOURCE_TIER_1 = 1,
    D3D11_SHARED_RESOURCE_TIER_2 = 2,
}

enum D3D11_VIDEO_DECODER_BUFFER_TYPE {
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0,
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 1,
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 2,
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 3,
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 4,
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 5,
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 6,
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 7,
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 8,
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT {
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = 1,
    D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = 2,
}

enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS {
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = 1,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = 2,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = 4,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = 8,
    D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = 16,
}

enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS {
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = 1,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = 2,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = 4,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = 8,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = 16,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = 32,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = 64,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = 128,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = 256,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = 512,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = 1024,
    D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = 2048,
}

enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS {
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = 1,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = 2,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = 4,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = 8,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = 16,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = 32,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = 64,
    D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = 128,
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS {
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = 1,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = 2,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = 4,
    D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = 8,
}

enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS {
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = 1,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = 2,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = 4,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = 8,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = 16,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = 32,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = 64,
    D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = 128,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS {
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = 2,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = 4,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = 8,
    D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = 16,
}

enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS {
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = 1,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = 2,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = 4,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = 8,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = 16,
    D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = 32,
}

enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS {
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = 1,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = 2,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = 4,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = 8,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = 16,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = 32,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = 64,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = 128,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = 256,
    D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = -2147483648,
}

enum D3D11_CONTENT_PROTECTION_CAPS {
    D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = 1,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = 2,
    D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = 4,
    D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = 8,
    D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = 16,
    D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = 32,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = 64,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = 128,
    D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = 256,
    D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = 512,
    D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = 1024,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = 2048,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = 8192,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = 16384,
    D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768,
}

enum D3D11_VIDEO_PROCESSOR_FILTER {
    D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = 0,
    D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = 1,
    D3D11_VIDEO_PROCESSOR_FILTER_HUE = 2,
    D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = 3,
    D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = 4,
    D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = 5,
    D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = 6,
    D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = 7,
}

enum D3D11_VIDEO_FRAME_FORMAT {
    D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = 0,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = 1,
    D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = 2,
}

enum D3D11_VIDEO_USAGE {
    D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = 0,
    D3D11_VIDEO_USAGE_OPTIMAL_SPEED = 1,
    D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = 2,
}

enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE {
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = 0,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = 1,
    D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = 2,
}

enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE {
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = 0,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = 1,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = 2,
    D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = 3,
}

enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE {
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = 0,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = 1,
    D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = 2,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT {
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = 2,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = 3,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = 4,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = 5,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = 6,
    D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = 7,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE {
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = 0,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = 1,
    D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = 2,
}

enum D3D11_VIDEO_PROCESSOR_ROTATION {
    D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = 0,
    D3D11_VIDEO_PROCESSOR_ROTATION_90 = 1,
    D3D11_VIDEO_PROCESSOR_ROTATION_180 = 2,
    D3D11_VIDEO_PROCESSOR_ROTATION_270 = 3,
}

enum D3D11_AUTHENTICATED_CHANNEL_TYPE {
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 1,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 2,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 3,
}

enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE {
    D3D11_PROCESSIDTYPE_UNKNOWN = 0,
    D3D11_PROCESSIDTYPE_DWM = 1,
    D3D11_PROCESSIDTYPE_HANDLE = 2,
}

enum D3D11_BUS_TYPE {
    D3D11_BUS_TYPE_OTHER = 0,
    D3D11_BUS_TYPE_PCI = 1,
    D3D11_BUS_TYPE_PCIX = 2,
    D3D11_BUS_TYPE_PCIEXPRESS = 3,
    D3D11_BUS_TYPE_AGP = 4,
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680,
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = -2147483648,
}

enum D3D11_VDOV_DIMENSION {
    D3D11_VDOV_DIMENSION_UNKNOWN = 0,
    D3D11_VDOV_DIMENSION_TEXTURE2D = 1,
}

enum D3D11_VPIV_DIMENSION {
    D3D11_VPIV_DIMENSION_UNKNOWN = 0,
    D3D11_VPIV_DIMENSION_TEXTURE2D = 1,
}

enum D3D11_VPOV_DIMENSION {
    D3D11_VPOV_DIMENSION_UNKNOWN = 0,
    D3D11_VPOV_DIMENSION_TEXTURE2D = 1,
    D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = 2,
}

enum D3D11_CREATE_DEVICE_FLAG {
    D3D11_CREATE_DEVICE_SINGLETHREADED = 1,
    D3D11_CREATE_DEVICE_DEBUG = 2,
    D3D11_CREATE_DEVICE_SWITCH_TO_REF = 4,
    D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8,
    D3D11_CREATE_DEVICE_BGRA_SUPPORT = 32,
    D3D11_CREATE_DEVICE_DEBUGGABLE = 64,
    D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128,
    D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 256,
    D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 2048,
}

struct CD3D11_DEFAULT {
}

struct D3D11_INPUT_ELEMENT_DESC {
    LPCSTR SemanticName;
    UINT SemanticIndex;
    DXGI_FORMAT Format;
    UINT InputSlot;
    UINT AlignedByteOffset;
    D3D11_INPUT_CLASSIFICATION InputSlotClass;
    UINT InstanceDataStepRate;
}

struct D3D11_SO_DECLARATION_ENTRY {
    UINT Stream;
    LPCSTR SemanticName;
    UINT SemanticIndex;
    BYTE StartComponent;
    BYTE ComponentCount;
    BYTE OutputSlot;
}

struct D3D11_VIEWPORT {
    FLOAT TopLeftX;
    FLOAT TopLeftY;
    FLOAT Width;
    FLOAT Height;
    FLOAT MinDepth;
    FLOAT MaxDepth;
}

struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS {
    UINT VertexCountPerInstance;
    UINT InstanceCount;
    UINT StartVertexLocation;
    UINT StartInstanceLocation;
}

struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS {
    UINT IndexCountPerInstance;
    UINT InstanceCount;
    UINT StartIndexLocation;
    INT BaseVertexLocation;
    UINT StartInstanceLocation;
}

struct CD3D11_RECT {
}

struct D3D11_BOX {
    UINT left;
    UINT top;
    UINT front;
    UINT right;
    UINT bottom;
    UINT back;
}

struct CD3D11_BOX {
}

struct D3D11_DEPTH_STENCILOP_DESC {
    D3D11_STENCIL_OP StencilFailOp;
    D3D11_STENCIL_OP StencilDepthFailOp;
    D3D11_STENCIL_OP StencilPassOp;
    D3D11_COMPARISON_FUNC StencilFunc;
}

struct D3D11_DEPTH_STENCIL_DESC {
    BOOL DepthEnable;
    D3D11_DEPTH_WRITE_MASK DepthWriteMask;
    D3D11_COMPARISON_FUNC DepthFunc;
    BOOL StencilEnable;
    UINT8 StencilReadMask;
    UINT8 StencilWriteMask;
    D3D11_DEPTH_STENCILOP_DESC FrontFace;
    D3D11_DEPTH_STENCILOP_DESC BackFace;
}

struct CD3D11_DEPTH_STENCIL_DESC {
}

struct D3D11_RENDER_TARGET_BLEND_DESC {
    BOOL BlendEnable;
    D3D11_BLEND SrcBlend;
    D3D11_BLEND DestBlend;
    D3D11_BLEND_OP BlendOp;
    D3D11_BLEND SrcBlendAlpha;
    D3D11_BLEND DestBlendAlpha;
    D3D11_BLEND_OP BlendOpAlpha;
    UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC {
    BOOL AlphaToCoverageEnable;
    BOOL IndependentBlendEnable;
    D3D11_RENDER_TARGET_BLEND_DESC [8] RenderTarget;
}

struct CD3D11_BLEND_DESC {
}

struct D3D11_RASTERIZER_DESC {
    D3D11_FILL_MODE FillMode;
    D3D11_CULL_MODE CullMode;
    BOOL FrontCounterClockwise;
    INT DepthBias;
    FLOAT DepthBiasClamp;
    FLOAT SlopeScaledDepthBias;
    BOOL DepthClipEnable;
    BOOL ScissorEnable;
    BOOL MultisampleEnable;
    BOOL AntialiasedLineEnable;
}

struct CD3D11_RASTERIZER_DESC {
}

struct D3D11_SUBRESOURCE_DATA {
    const void * pSysMem;
    UINT SysMemPitch;
    UINT SysMemSlicePitch;
}

struct D3D11_MAPPED_SUBRESOURCE {
    void * pData;
    UINT RowPitch;
    UINT DepthPitch;
}

struct D3D11_BUFFER_DESC {
    UINT ByteWidth;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
    UINT StructureByteStride;
}

struct CD3D11_BUFFER_DESC {
}

struct D3D11_TEXTURE1D_DESC {
    UINT Width;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}

struct CD3D11_TEXTURE1D_DESC {
}

struct D3D11_TEXTURE2D_DESC {
    UINT Width;
    UINT Height;
    UINT MipLevels;
    UINT ArraySize;
    DXGI_FORMAT Format;
    DXGI_SAMPLE_DESC SampleDesc;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}

struct CD3D11_TEXTURE2D_DESC {
}

struct D3D11_TEXTURE3D_DESC {
    UINT Width;
    UINT Height;
    UINT Depth;
    UINT MipLevels;
    DXGI_FORMAT Format;
    D3D11_USAGE Usage;
    UINT BindFlags;
    UINT CPUAccessFlags;
    UINT MiscFlags;
}

struct CD3D11_TEXTURE3D_DESC {
}

struct D3D11_BUFFER_SRV {
}

struct D3D11_BUFFEREX_SRV {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
}

struct D3D11_TEX1D_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
}

struct D3D11_TEX1D_ARRAY_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2D_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
}

struct D3D11_TEX2D_ARRAY_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX3D_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
}

struct D3D11_TEXCUBE_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
}

struct D3D11_TEXCUBE_ARRAY_SRV {
    UINT MostDetailedMip;
    UINT MipLevels;
    UINT First2DArrayFace;
    UINT NumCubes;
}

struct D3D11_TEX2DMS_SRV {
    UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_SRV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D11_SRV_DIMENSION ViewDimension;
}

struct CD3D11_SHADER_RESOURCE_VIEW_DESC {
}

struct D3D11_BUFFER_RTV {
}

struct D3D11_TEX1D_RTV {
    UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_RTV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2D_RTV {
    UINT MipSlice;
}

struct D3D11_TEX2DMS_RTV {
    UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2D_ARRAY_RTV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX3D_RTV {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}

struct D3D11_RENDER_TARGET_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D11_RTV_DIMENSION ViewDimension;
}

struct CD3D11_RENDER_TARGET_VIEW_DESC {
}

struct CD3D11_VIEWPORT {
}

struct D3D11_TEX1D_DSV {
    UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_DSV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2D_DSV {
    UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2DMS_DSV {
    UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_DSV {
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_DEPTH_STENCIL_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D11_DSV_DIMENSION ViewDimension;
    UINT Flags;
}

struct CD3D11_DEPTH_STENCIL_VIEW_DESC {
}

struct D3D11_BUFFER_UAV {
    UINT FirstElement;
    UINT NumElements;
    UINT Flags;
}

struct D3D11_TEX1D_UAV {
    UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_UAV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX2D_UAV {
    UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_UAV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_TEX3D_UAV {
    UINT MipSlice;
    UINT FirstWSlice;
    UINT WSize;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC {
    DXGI_FORMAT Format;
    D3D11_UAV_DIMENSION ViewDimension;
}

struct CD3D11_UNORDERED_ACCESS_VIEW_DESC {
}

struct D3D11_SAMPLER_DESC {
    D3D11_FILTER Filter;
    D3D11_TEXTURE_ADDRESS_MODE AddressU;
    D3D11_TEXTURE_ADDRESS_MODE AddressV;
    D3D11_TEXTURE_ADDRESS_MODE AddressW;
    FLOAT MipLODBias;
    UINT MaxAnisotropy;
    D3D11_COMPARISON_FUNC ComparisonFunc;
    FLOAT [4] BorderColor;
    FLOAT MinLOD;
    FLOAT MaxLOD;
}

struct CD3D11_SAMPLER_DESC {
}

struct D3D11_QUERY_DESC {
    D3D11_QUERY Query;
    UINT MiscFlags;
}

struct CD3D11_QUERY_DESC {
}

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT {
    UINT64 Frequency;
    BOOL Disjoint;
}

struct D3D11_QUERY_DATA_PIPELINE_STATISTICS {
    UINT64 IAVertices;
    UINT64 IAPrimitives;
    UINT64 VSInvocations;
    UINT64 GSInvocations;
    UINT64 GSPrimitives;
    UINT64 CInvocations;
    UINT64 CPrimitives;
    UINT64 PSInvocations;
    UINT64 HSInvocations;
    UINT64 DSInvocations;
    UINT64 CSInvocations;
}

struct D3D11_QUERY_DATA_SO_STATISTICS {
    UINT64 NumPrimitivesWritten;
    UINT64 PrimitivesStorageNeeded;
}

struct D3D11_COUNTER_DESC {
    D3D11_COUNTER Counter;
    UINT MiscFlags;
}

struct CD3D11_COUNTER_DESC {
}

struct D3D11_COUNTER_INFO {
    D3D11_COUNTER LastDeviceDependentCounter;
    UINT NumSimultaneousCounters;
    UINT8 NumDetectableParallelUnits;
}

struct D3D11_CLASS_INSTANCE_DESC {
    UINT InstanceId;
    UINT InstanceIndex;
    UINT TypeId;
    UINT ConstantBuffer;
    UINT BaseConstantBufferOffset;
    UINT BaseTexture;
    UINT BaseSampler;
    BOOL Created;
}

struct D3D11_FEATURE_DATA_THREADING {
    BOOL DriverConcurrentCreates;
    BOOL DriverCommandLists;
}

struct D3D11_FEATURE_DATA_DOUBLES {
    BOOL DoublePrecisionFloatShaderOps;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2 {
    DXGI_FORMAT InFormat;
    UINT OutFormatSupport2;
}

struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS {
    BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS {
    BOOL OutputMergerLogicOp;
    BOOL UAVOnlyRenderingForcedSampleCount;
    BOOL DiscardAPIsSeenByDriver;
    BOOL FlagsForUpdateAndCopySeenByDriver;
    BOOL ClearView;
    BOOL CopyWithOverlap;
    BOOL ConstantBufferPartialUpdate;
    BOOL ConstantBufferOffsetting;
    BOOL MapNoOverwriteOnDynamicConstantBuffer;
    BOOL MapNoOverwriteOnDynamicBufferSRV;
    BOOL MultisampleRTVWithForcedSampleCountOne;
    BOOL SAD4ShaderInstructions;
    BOOL ExtendedDoublesShaderInstructions;
    BOOL ExtendedResourceSharing;
}

struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO {
    BOOL TileBasedDeferredRenderer;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS {
    BOOL FullNonPow2TextureSupport;
}

struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT {
    BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT {
    UINT PixelShaderMinPrecision;
    UINT AllOtherShaderStagesMinPrecision;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS1 {
    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    BOOL MinMaxFiltering;
    BOOL ClearViewAlsoSupportsDepthOnlyFormats;
    BOOL MapOnDefaultBuffers;
}

struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT {
    BOOL SimpleInstancingSupported;
}

struct D3D11_FEATURE_DATA_MARKER_SUPPORT {
    BOOL Profile;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS1 {
    BOOL FullNonPow2TextureSupported;
    BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
    BOOL SimpleInstancingSupported;
    BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS2 {
    BOOL PSSpecifiedStencilRefSupported;
    BOOL TypedUAVLoadAdditionalFormats;
    BOOL ROVsSupported;
    D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
    D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
    BOOL MapOnDefaultTextures;
    BOOL StandardSwizzle;
    BOOL UnifiedMemoryArchitecture;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS3 {
    BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}

struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT {
    UINT MaxGPUVirtualAddressBitsPerResource;
    UINT MaxGPUVirtualAddressBitsPerProcess;
}

struct D3D11_FEATURE_DATA_SHADER_CACHE {
    UINT SupportFlags;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS5 {
    D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
}

struct CD3D11_VIDEO_DEFAULT {
}

struct D3D11_VIDEO_DECODER_DESC {
    GUID Guid;
    UINT SampleWidth;
    UINT SampleHeight;
    DXGI_FORMAT OutputFormat;
}

struct D3D11_VIDEO_DECODER_CONFIG {
    GUID guidConfigBitstreamEncryption;
    GUID guidConfigMBcontrolEncryption;
    GUID guidConfigResidDiffEncryption;
    UINT ConfigBitstreamRaw;
    UINT ConfigMBcontrolRasterOrder;
    UINT ConfigResidDiffHost;
    UINT ConfigSpatialResid8;
    UINT ConfigResid8Subtraction;
    UINT ConfigSpatialHost8or9Clipping;
    UINT ConfigSpatialResidInterleaved;
    UINT ConfigIntraResidUnsigned;
    UINT ConfigResidDiffAccelerator;
    UINT ConfigHostInverseScan;
    UINT ConfigSpecificIDCT;
    UINT Config4GroupedCoefs;
    USHORT ConfigMinRenderTargetBuffCount;
    USHORT ConfigDecoderSpecific;
}

struct _D3D11_AES_CTR_IV {
    UINT64 IV;
    UINT64 Count;
}

struct D3D11_ENCRYPTED_BLOCK_INFO {
    UINT NumEncryptedBytesAtBeginning;
    UINT NumBytesInSkipPattern;
    UINT NumBytesInEncryptPattern;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC {
    D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
    UINT BufferIndex;
    UINT DataOffset;
    UINT DataSize;
    UINT FirstMBaddress;
    UINT NumMBsInBuffer;
    UINT Width;
    UINT Height;
    UINT Stride;
    UINT ReservedBits;
    void * pIV;
    UINT IVSize;
    BOOL PartialEncryption;
    D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}

struct D3D11_VIDEO_DECODER_EXTENSION {
    UINT Function;
    void * pPrivateInputData;
    UINT PrivateInputDataSize;
    void * pPrivateOutputData;
    UINT PrivateOutputDataSize;
    UINT ResourceCount;
    ID3D11Resource ** ppResourceList;
}

struct D3D11_VIDEO_PROCESSOR_CAPS {
    UINT DeviceCaps;
    UINT FeatureCaps;
    UINT FilterCaps;
    UINT InputFormatCaps;
    UINT AutoStreamCaps;
    UINT StereoCaps;
    UINT RateConversionCapsCount;
    UINT MaxInputStreams;
    UINT MaxStreamStates;
}

struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS {
    UINT PastFrames;
    UINT FutureFrames;
    UINT ProcessorCaps;
    UINT ITelecineCaps;
    UINT CustomRateCount;
}

struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS {
    UINT Caps;
    UINT KeyExchangeTypeCount;
    UINT BlockAlignmentSize;
    ULONGLONG ProtectedMemorySize;
}

struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE {
    DXGI_RATIONAL CustomRate;
    UINT OutputFrames;
    BOOL InputInterlaced;
    UINT InputFramesOrFields;
}

struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE {
    int Minimum;
    int Maximum;
    int Default;
    float Multiplier;
}

struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC {
    D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
    DXGI_RATIONAL InputFrameRate;
    UINT InputWidth;
    UINT InputHeight;
    DXGI_RATIONAL OutputFrameRate;
    UINT OutputWidth;
    UINT OutputHeight;
    D3D11_VIDEO_USAGE Usage;
}

struct D3D11_VIDEO_COLOR_RGBA {
    float R;
    float G;
    float B;
    float A;
}

struct D3D11_VIDEO_COLOR_YCbCrA {
    float Y;
    float Cb;
    float Cr;
    float A;
}

struct D3D11_VIDEO_COLOR {
}

struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE {
    UINT Usage;
    UINT RGB_Range;
    UINT YCbCr_Matrix;
    UINT YCbCr_xvYCC;
    UINT Nominal_Range;
    UINT Reserved;
}

struct D3D11_VIDEO_PROCESSOR_STREAM {
    BOOL Enable;
    UINT OutputIndex;
    UINT InputFrameOrField;
    UINT PastFrames;
    UINT FutureFrames;
    ID3D11VideoProcessorInputView ** ppPastSurfaces;
    ID3D11VideoProcessorInputView * pInputSurface;
    ID3D11VideoProcessorInputView ** ppFutureSurfaces;
    ID3D11VideoProcessorInputView ** ppPastSurfacesRight;
    ID3D11VideoProcessorInputView * pInputSurfaceRight;
    ID3D11VideoProcessorInputView ** ppFutureSurfacesRight;
}

struct D3D11_OMAC {
    BYTE [16] Omac;
}

struct D3D11_AUTHENTICATED_QUERY_INPUT {
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT {
    D3D11_OMAC omac;
    GUID QueryType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}

struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}

struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DecoderHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT RestrictedSharedResourceProcessCount;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT ProcessIndex;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT ProcessIndex;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
    HANDLE ProcessHandle;
}

struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT UnrestrictedProtectedSharedResourceCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    HANDLE DeviceHandle;
    HANDLE CryptoSessionHandle;
    UINT OutputIDIndex;
    UINT64 OutputID;
}

struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    D3D11_BUS_TYPE BusType;
    BOOL AccessibleInContiguousBlocks;
    BOOL AccessibleInNonContiguousBlocks;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidCount;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT {
    D3D11_AUTHENTICATED_QUERY_INPUT Input;
    UINT EncryptionGuidIndex;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    UINT EncryptionGuidIndex;
    GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT {
    D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
    GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INPUT {
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT {
    D3D11_OMAC omac;
    GUID ConfigureType;
    HANDLE hChannel;
    UINT SequenceNumber;
    HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    UINT StartSequenceQuery;
    UINT StartSequenceConfigure;
}

struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}

struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    HANDLE DecoderHandle;
    HANDLE CryptoSessionHandle;
    HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
    HANDLE ProcessHandle;
    BOOL AllowAccess;
}

struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT {
    D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
    GUID EncryptionGuid;
}

struct D3D11_TEX2D_VDOV {
    UINT ArraySlice;
}

struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC {
    GUID DecodeProfile;
    D3D11_VDOV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_VPIV {
    UINT MipSlice;
    UINT ArraySlice;
}

struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC {
    UINT FourCC;
    D3D11_VPIV_DIMENSION ViewDimension;
}

struct D3D11_TEX2D_VPOV {
    UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_VPOV {
    UINT MipSlice;
    UINT FirstArraySlice;
    UINT ArraySize;
}

struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC {
    D3D11_VPOV_DIMENSION ViewDimension;
}

interface ID3D11DeviceChild: IUnknown {
    static immutable uuidof = GUID(0x1841e5c8, 0x16b0, 0x489b, [0xbc, 0xc8, 0x44, 0xcf, 0xb0, 0xd5, 0xde, 0xae]);
    void GetDevice(ID3D11Device * ppDevice);
    HRESULT GetPrivateData(const GUID * guid, UINT * pDataSize, void * pData);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
}

interface ID3D11DepthStencilState: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x03823efb, 0x8d8f, 0x4e1c, [0x9a, 0xa2, 0xf6, 0x4b, 0xb2, 0xcb, 0xfd, 0xf1]);
    void GetDesc(D3D11_DEPTH_STENCIL_DESC * pDesc);
}

interface ID3D11BlendState: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x75b68faa, 0x347d, 0x4159, [0x8f, 0x45, 0xa0, 0x64, 0x0f, 0x01, 0xcd, 0x9a]);
    void GetDesc(D3D11_BLEND_DESC * pDesc);
}

interface ID3D11RasterizerState: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x9bb4ab81, 0xab1a, 0x4d8f, [0xb5, 0x06, 0xfc, 0x04, 0x20, 0x0b, 0x6e, 0xe7]);
    void GetDesc(D3D11_RASTERIZER_DESC * pDesc);
}

interface ID3D11Resource: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xdc8e63f3, 0xd12b, 0x4952, [0xb4, 0x7b, 0x5e, 0x45, 0x02, 0x6a, 0x86, 0x2d]);
    void GetType(D3D11_RESOURCE_DIMENSION * pResourceDimension);
    void SetEvictionPriority(UINT EvictionPriority);
    UINT GetEvictionPriority();
}

interface ID3D11Buffer: ID3D11Resource {
    static immutable uuidof = GUID(0x48570b85, 0xd1ee, 0x4fcd, [0xa2, 0x50, 0xeb, 0x35, 0x07, 0x22, 0xb0, 0x37]);
    void GetDesc(D3D11_BUFFER_DESC * pDesc);
}

interface ID3D11Texture1D: ID3D11Resource {
    static immutable uuidof = GUID(0xf8fb5c27, 0xc6b3, 0x4f75, [0xa4, 0xc8, 0x43, 0x9a, 0xf2, 0xef, 0x56, 0x4c]);
    void GetDesc(D3D11_TEXTURE1D_DESC * pDesc);
}

interface ID3D11Texture2D: ID3D11Resource {
    static immutable uuidof = GUID(0x6f15aaf2, 0xd208, 0x4e89, [0x9a, 0xb4, 0x48, 0x95, 0x35, 0xd3, 0x4f, 0x9c]);
    void GetDesc(D3D11_TEXTURE2D_DESC * pDesc);
}

interface ID3D11Texture3D: ID3D11Resource {
    static immutable uuidof = GUID(0x037e866e, 0xf56d, 0x4357, [0xa8, 0xaf, 0x9d, 0xab, 0xbe, 0x6e, 0x25, 0x0e]);
    void GetDesc(D3D11_TEXTURE3D_DESC * pDesc);
}

interface ID3D11View: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x839d1216, 0xbb2e, 0x412b, [0xb7, 0xf4, 0xa9, 0xdb, 0xeb, 0xe0, 0x8e, 0xd1]);
    void GetResource(ID3D11Resource * ppResource);
}

interface ID3D11ShaderResourceView: ID3D11View {
    static immutable uuidof = GUID(0xb0e06fe0, 0x8192, 0x4e1a, [0xb1, 0xca, 0x36, 0xd7, 0x41, 0x47, 0x10, 0xb2]);
    void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc);
}

interface ID3D11RenderTargetView: ID3D11View {
    static immutable uuidof = GUID(0xdfdba067, 0x0b8d, 0x4865, [0x87, 0x5b, 0xd7, 0xb4, 0x51, 0x6c, 0xc1, 0x64]);
    void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC * pDesc);
}

interface ID3D11DepthStencilView: ID3D11View {
    static immutable uuidof = GUID(0x9fdac92a, 0x1876, 0x48c3, [0xaf, 0xad, 0x25, 0xb9, 0x4f, 0x84, 0xa9, 0xb6]);
    void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc);
}

interface ID3D11UnorderedAccessView: ID3D11View {
    static immutable uuidof = GUID(0x28acf509, 0x7f5c, 0x48f6, [0x86, 0x11, 0xf3, 0x16, 0x01, 0x0a, 0x63, 0x80]);
    void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc);
}

interface ID3D11VertexShader: IUnknown {
    static immutable uuidof = GUID(0x3b301d64, 0xd678, 0x4289, [0x88, 0x97, 0x22, 0xf8, 0x92, 0x8b, 0x72, 0xf3]);
}

interface ID3D11HullShader: IUnknown {
    static immutable uuidof = GUID(0x8e5c6061, 0x628a, 0x4c8e, [0x82, 0x64, 0xbb, 0xe4, 0x5c, 0xb3, 0xd5, 0xdd]);
}

interface ID3D11DomainShader: IUnknown {
    static immutable uuidof = GUID(0xf582c508, 0x0f36, 0x490c, [0x99, 0x77, 0x31, 0xee, 0xce, 0x26, 0x8c, 0xfa]);
}

interface ID3D11GeometryShader: IUnknown {
    static immutable uuidof = GUID(0x38325b96, 0xeffb, 0x4022, [0xba, 0x02, 0x2e, 0x79, 0x5b, 0x70, 0x27, 0x5c]);
}

interface ID3D11PixelShader: IUnknown {
    static immutable uuidof = GUID(0xea82e40d, 0x51dc, 0x4f33, [0x93, 0xd4, 0xdb, 0x7c, 0x91, 0x25, 0xae, 0x8c]);
}

interface ID3D11ComputeShader: IUnknown {
    static immutable uuidof = GUID(0x4f5b196e, 0xc2bd, 0x495e, [0xbd, 0x01, 0x1f, 0xde, 0xd3, 0x8e, 0x49, 0x69]);
}

interface ID3D11InputLayout: IUnknown {
    static immutable uuidof = GUID(0xe4819ddc, 0x4cf0, 0x4025, [0xbd, 0x26, 0x5d, 0xe8, 0x2a, 0x3e, 0x07, 0xb7]);
}

interface ID3D11SamplerState: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xda6fea51, 0x564c, 0x4487, [0x98, 0x10, 0xf0, 0xd0, 0xf9, 0xb4, 0xe3, 0xa5]);
    void GetDesc(D3D11_SAMPLER_DESC * pDesc);
}

interface ID3D11Asynchronous: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x4b35d0cd, 0x1e15, 0x4258, [0x9c, 0x98, 0x1b, 0x13, 0x33, 0xf6, 0xdd, 0x3b]);
    UINT GetDataSize();
}

interface ID3D11Query: ID3D11Asynchronous {
    static immutable uuidof = GUID(0xd6c00747, 0x87b7, 0x425e, [0xb8, 0x4d, 0x44, 0xd1, 0x08, 0x56, 0x0a, 0xfd]);
    void GetDesc(D3D11_QUERY_DESC * pDesc);
}

interface ID3D11Predicate: IUnknown {
    static immutable uuidof = GUID(0x9eb576dd, 0x9f77, 0x4d86, [0x81, 0xaa, 0x8b, 0xab, 0x5f, 0xe4, 0x90, 0xe2]);
}

interface ID3D11Counter: ID3D11Asynchronous {
    static immutable uuidof = GUID(0x6e8c49fb, 0xa371, 0x4770, [0xb4, 0x40, 0x29, 0x08, 0x60, 0x22, 0xb7, 0x41]);
    void GetDesc(D3D11_COUNTER_DESC * pDesc);
}

interface ID3D11ClassInstance: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xa6cd7faa, 0xb0b7, 0x4a2f, [0x94, 0x36, 0x86, 0x62, 0xa6, 0x57, 0x97, 0xcb]);
    void GetClassLinkage(ID3D11ClassLinkage * ppLinkage);
    void GetDesc(D3D11_CLASS_INSTANCE_DESC * pDesc);
    void GetInstanceName(LPSTR pInstanceName, SIZE_T * pBufferLength);
    void GetTypeName(LPSTR pTypeName, SIZE_T * pBufferLength);
}

interface ID3D11ClassLinkage: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xddf57cba, 0x9543, 0x46e4, [0xa1, 0x2b, 0xf2, 0x07, 0xa0, 0xfe, 0x7f, 0xed]);
    HRESULT GetClassInstance(LPCSTR pClassInstanceName, UINT InstanceIndex, ID3D11ClassInstance * ppInstance);
    HRESULT CreateClassInstance(LPCSTR pClassTypeName, UINT ConstantBufferOffset, UINT ConstantVectorOffset, UINT TextureOffset, UINT SamplerOffset, ID3D11ClassInstance * ppInstance);
}

interface ID3D11CommandList: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xa24bc4d1, 0x769e, 0x43f7, [0x80, 0x13, 0x98, 0xff, 0x56, 0x6c, 0x18, 0xe2]);
    UINT GetContextFlags();
}

interface ID3D11DeviceContext: ID3D11DeviceChild {
    static immutable uuidof = GUID(0xc0bfa96c, 0xe089, 0x44fb, [0x8e, 0xaf, 0x26, 0xf8, 0x79, 0x61, 0x90, 0xda]);
    void VSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void PSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void PSSetShader(ID3D11PixelShader  pPixelShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void PSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void VSSetShader(ID3D11VertexShader  pVertexShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void DrawIndexed(UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation);
    void Draw(UINT VertexCount, UINT StartVertexLocation);
    HRESULT Map(ID3D11Resource  pResource, UINT Subresource, D3D11_MAP MapType, UINT MapFlags, D3D11_MAPPED_SUBRESOURCE * pMappedResource);
    void Unmap(ID3D11Resource  pResource, UINT Subresource);
    void PSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void IASetInputLayout(ID3D11InputLayout  pInputLayout);
    void IASetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppVertexBuffers, const UINT * pStrides, const UINT * pOffsets);
    void IASetIndexBuffer(ID3D11Buffer  pIndexBuffer, DXGI_FORMAT Format, UINT Offset);
    void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation);
    void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation);
    void GSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void GSSetShader(ID3D11GeometryShader  pShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
    void VSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void VSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void Begin(ID3D11Asynchronous  pAsync);
    void End(ID3D11Asynchronous  pAsync);
    HRESULT GetData(ID3D11Asynchronous  pAsync, void * pData, UINT DataSize, UINT GetDataFlags);
    void SetPredication(ID3D11Predicate  pPredicate, BOOL PredicateValue);
    void GSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void GSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void OMSetRenderTargets(UINT NumViews, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView  pDepthStencilView);
    void OMSetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView  pDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews, const UINT * pUAVInitialCounts);
    void OMSetBlendState(ID3D11BlendState  pBlendState, const FLOAT [4] BlendFactor, UINT SampleMask);
    void OMSetDepthStencilState(ID3D11DepthStencilState  pDepthStencilState, UINT StencilRef);
    void SOSetTargets(UINT NumBuffers, ID3D11Buffer * ppSOTargets, const UINT * pOffsets);
    void DrawAuto();
    void DrawIndexedInstancedIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void DrawInstancedIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ);
    void DispatchIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void RSSetState(ID3D11RasterizerState  pRasterizerState);
    void RSSetViewports(UINT NumViewports, const D3D11_VIEWPORT * pViewports);
    void RSSetScissorRects(UINT NumRects, const D3D11_RECT * pRects);
    void CopySubresourceRegion(ID3D11Resource  pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, ID3D11Resource  pSrcResource, UINT SrcSubresource, const D3D11_BOX * pSrcBox);
    void CopyResource(ID3D11Resource  pDstResource, ID3D11Resource  pSrcResource);
    void UpdateSubresource(ID3D11Resource  pDstResource, UINT DstSubresource, const D3D11_BOX * pDstBox, const void * pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch);
    void CopyStructureCount(ID3D11Buffer  pDstBuffer, UINT DstAlignedByteOffset, ID3D11UnorderedAccessView  pSrcView);
    void ClearRenderTargetView(ID3D11RenderTargetView  pRenderTargetView, const FLOAT [4] ColorRGBA);
    void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView  pUnorderedAccessView, const UINT [4] Values);
    void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView  pUnorderedAccessView, const FLOAT [4] Values);
    void ClearDepthStencilView(ID3D11DepthStencilView  pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil);
    void GenerateMips(ID3D11ShaderResourceView  pShaderResourceView);
    void SetResourceMinLOD(ID3D11Resource  pResource, FLOAT MinLOD);
    FLOAT GetResourceMinLOD(ID3D11Resource  pResource);
    void ResolveSubresource(ID3D11Resource  pDstResource, UINT DstSubresource, ID3D11Resource  pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format);
    void ExecuteCommandList(ID3D11CommandList  pCommandList, BOOL RestoreContextState);
    void HSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void HSSetShader(ID3D11HullShader  pHullShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void HSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void HSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void DSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void DSSetShader(ID3D11DomainShader  pDomainShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void DSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void DSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void CSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void CSSetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews, const UINT * pUAVInitialCounts);
    void CSSetShader(ID3D11ComputeShader  pComputeShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void CSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void CSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void VSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void PSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void PSGetShader(ID3D11PixelShader * ppPixelShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void PSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void VSGetShader(ID3D11VertexShader * ppVertexShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void PSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void IAGetInputLayout(ID3D11InputLayout * ppInputLayout);
    void IAGetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppVertexBuffers, UINT * pStrides, UINT * pOffsets);
    void IAGetIndexBuffer(ID3D11Buffer * pIndexBuffer, DXGI_FORMAT * Format, UINT * Offset);
    void GSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void GSGetShader(ID3D11GeometryShader * ppGeometryShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY * pTopology);
    void VSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void VSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void GetPredication(ID3D11Predicate * ppPredicate, BOOL * pPredicateValue);
    void GSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void GSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void OMGetRenderTargets(UINT NumViews, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView * ppDepthStencilView);
    void OMGetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView * ppDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews);
    void OMGetBlendState(ID3D11BlendState * ppBlendState, FLOAT [4] BlendFactor, UINT * pSampleMask);
    void OMGetDepthStencilState(ID3D11DepthStencilState * ppDepthStencilState, UINT * pStencilRef);
    void SOGetTargets(UINT NumBuffers, ID3D11Buffer * ppSOTargets);
    void RSGetState(ID3D11RasterizerState * ppRasterizerState);
    void RSGetViewports(UINT * pNumViewports, D3D11_VIEWPORT * pViewports);
    void RSGetScissorRects(UINT * pNumRects, D3D11_RECT * pRects);
    void HSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void HSGetShader(ID3D11HullShader * ppHullShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void HSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void HSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void DSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void DSGetShader(ID3D11DomainShader * ppDomainShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void DSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void DSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void CSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void CSGetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews);
    void CSGetShader(ID3D11ComputeShader * ppComputeShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void CSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void CSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void ClearState();
    void Flush();
    D3D11_DEVICE_CONTEXT_TYPE GetType();
    UINT GetContextFlags();
    HRESULT FinishCommandList(BOOL RestoreDeferredContextState, ID3D11CommandList * ppCommandList);
}

interface ID3D11VideoDecoder: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x3C9C5B51, 0x995D, 0x48d1, [0x9B, 0x8D, 0xFA, 0x5C, 0xAE, 0xDE, 0xD6, 0x5C]);
    HRESULT GetCreationParameters(D3D11_VIDEO_DECODER_DESC * pVideoDesc, D3D11_VIDEO_DECODER_CONFIG * pConfig);
    HRESULT GetDriverHandle(HANDLE * pDriverHandle);
}

interface ID3D11VideoProcessorEnumerator: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x31627037, 0x53AB, 0x4200, [0x90, 0x61, 0x05, 0xFA, 0xA9, 0xAB, 0x45, 0xF9]);
    HRESULT GetVideoProcessorContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pContentDesc);
    HRESULT CheckVideoProcessorFormat(DXGI_FORMAT Format, UINT * pFlags);
    HRESULT GetVideoProcessorCaps(D3D11_VIDEO_PROCESSOR_CAPS * pCaps);
    HRESULT GetVideoProcessorRateConversionCaps(UINT TypeIndex, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps);
    HRESULT GetVideoProcessorCustomRate(UINT TypeIndex, UINT CustomRateIndex, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE * pRate);
    HRESULT GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, D3D11_VIDEO_PROCESSOR_FILTER_RANGE * pRange);
}

interface ID3D11VideoProcessor: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x1D7B0652, 0x185F, 0x41c6, [0x85, 0xCE, 0x0C, 0x5B, 0xE3, 0xD4, 0xAE, 0x6C]);
    void GetContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc);
    void GetRateConversionCaps(D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps);
}

interface ID3D11AuthenticatedChannel: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x3015A308, 0xDCBD, 0x47aa, [0xA7, 0x47, 0x19, 0x24, 0x86, 0xD1, 0x4D, 0x4A]);
    HRESULT GetCertificateSize(UINT * pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE * pCertificate);
    void GetChannelHandle(HANDLE * pChannelHandle);
}

interface ID3D11CryptoSession: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x9B32F9AD, 0xBDCC, 0x40a6, [0xA3, 0x9D, 0xD5, 0xC8, 0x65, 0x84, 0x57, 0x20]);
    void GetCryptoType(GUID * pCryptoType);
    void GetDecoderProfile(GUID * pDecoderProfile);
    HRESULT GetCertificateSize(UINT * pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE * pCertificate);
    void GetCryptoSessionHandle(HANDLE * pCryptoSessionHandle);
}

interface ID3D11VideoDecoderOutputView: ID3D11View {
    static immutable uuidof = GUID(0xC2931AEA, 0x2A85, 0x4f20, [0x86, 0x0F, 0xFB, 0xA1, 0xFD, 0x25, 0x6E, 0x18]);
    void GetDesc(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc);
}

interface ID3D11VideoProcessorInputView: ID3D11View {
    static immutable uuidof = GUID(0x11EC5A5F, 0x51DC, 0x4945, [0xAB, 0x34, 0x6E, 0x8C, 0x21, 0x30, 0x0E, 0xA5]);
    void GetDesc(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc);
}

interface ID3D11VideoProcessorOutputView: ID3D11View {
    static immutable uuidof = GUID(0xA048285E, 0x25A9, 0x4527, [0xBD, 0x93, 0xD6, 0x8B, 0x68, 0xC4, 0x42, 0x54]);
    void GetDesc(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc);
}

interface ID3D11VideoContext: ID3D11DeviceChild {
    static immutable uuidof = GUID(0x61F21C45, 0x3C0E, 0x4a74, [0x9C, 0xEA, 0x67, 0x10, 0x0D, 0x9A, 0xD5, 0xE4]);
    HRESULT GetDecoderBuffer(ID3D11VideoDecoder  pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, UINT * pBufferSize, void ** ppBuffer);
    HRESULT ReleaseDecoderBuffer(ID3D11VideoDecoder  pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);
    HRESULT DecoderBeginFrame(ID3D11VideoDecoder  pDecoder, ID3D11VideoDecoderOutputView  pView, UINT ContentKeySize, const void * pContentKey);
    HRESULT DecoderEndFrame(ID3D11VideoDecoder  pDecoder);
    HRESULT SubmitDecoderBuffers(ID3D11VideoDecoder  pDecoder, UINT NumBuffers, const D3D11_VIDEO_DECODER_BUFFER_DESC * pBufferDesc);
    APP_DEPRECATED_HRESULT DecoderExtension(ID3D11VideoDecoder  pDecoder, const D3D11_VIDEO_DECODER_EXTENSION * pExtensionData);
    void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor  pVideoProcessor, BOOL YCbCr, const D3D11_VIDEO_COLOR * pColor);
    void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor  pVideoProcessor, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, UINT StreamIndex);
    void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable, SIZE Size);
    void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable);
    APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtension(ID3D11VideoProcessor  pVideoProcessor, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor  pVideoProcessor, BOOL * Enabled, RECT * pRect);
    void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor  pVideoProcessor, BOOL * pYCbCr, D3D11_VIDEO_COLOR * pColor);
    void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE * pAlphaFillMode, UINT * pStreamIndex);
    void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor  pVideoProcessor, BOOL * pEnabled, SIZE * pSize);
    void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor  pVideoProcessor, BOOL * pEnabled);
    APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtension(ID3D11VideoProcessor  pVideoProcessor, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);
    void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, BOOL RepeatFrame, const DXGI_RATIONAL * pCustomRate);
    void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Alpha);
    void VideoProcessorSetStreamPalette(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, UINT Count, const UINT * pEntries);
    void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const DXGI_RATIONAL * pSourceAspectRatio, const DXGI_RATIONAL * pDestinationAspectRatio);
    void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Lower, FLOAT Upper);
    void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, BOOL LeftViewFrame0, BOOL BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);
    void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable);
    void VideoProcessorSetStreamFilter(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL Enable, int Level);
    APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtension(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT * pFrameFormat);
    void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE * pOutputRate, BOOL * pRepeatFrame, DXGI_RATIONAL * pCustomRate);
    void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, RECT * pRect);
    void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, RECT * pRect);
    void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, FLOAT * pAlpha);
    void VideoProcessorGetStreamPalette(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, UINT Count, UINT * pEntries);
    void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, DXGI_RATIONAL * pSourceAspectRatio, DXGI_RATIONAL * pDestinationAspectRatio);
    void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, FLOAT * pLower, FLOAT * pUpper);
    void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT * pFormat, BOOL * pLeftViewFrame0, BOOL * pBaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE * pFlipMode, int * MonoOffset);
    void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled);
    void VideoProcessorGetStreamFilter(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL * pEnabled, int * pLevel);
    APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtension(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    HRESULT VideoProcessorBlt(ID3D11VideoProcessor  pVideoProcessor, ID3D11VideoProcessorOutputView  pView, UINT OutputFrame, UINT StreamCount, const D3D11_VIDEO_PROCESSOR_STREAM * pStreams);
    HRESULT NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession  pCryptoSession, UINT DataSize, void * pData);
    void EncryptionBlt(ID3D11CryptoSession  pCryptoSession, ID3D11Texture2D  pSrcSurface, ID3D11Texture2D  pDstSurface, UINT IVSize, void * pIV);
    void DecryptionBlt(ID3D11CryptoSession  pCryptoSession, ID3D11Texture2D  pSrcSurface, ID3D11Texture2D  pDstSurface, D3D11_ENCRYPTED_BLOCK_INFO * pEncryptedBlockInfo, UINT ContentKeySize, const void * pContentKey, UINT IVSize, void * pIV);
    void StartSessionKeyRefresh(ID3D11CryptoSession  pCryptoSession, UINT RandomNumberSize, void * pRandomNumber);
    void FinishSessionKeyRefresh(ID3D11CryptoSession  pCryptoSession);
    HRESULT GetEncryptionBltKey(ID3D11CryptoSession  pCryptoSession, UINT KeySize, void * pReadbackKey);
    HRESULT NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel  pChannel, UINT DataSize, void * pData);
    HRESULT QueryAuthenticatedChannel(ID3D11AuthenticatedChannel  pChannel, UINT InputSize, const void * pInput, UINT OutputSize, void * pOutput);
    HRESULT ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel  pChannel, UINT InputSize, const void * pInput, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT * pOutput);
    void VideoProcessorSetStreamRotation(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);
    void VideoProcessorGetStreamRotation(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnable, D3D11_VIDEO_PROCESSOR_ROTATION * pRotation);
}

interface ID3D11VideoDevice: IUnknown {
    static immutable uuidof = GUID(0x10EC4D5B, 0x975A, 0x4689, [0xB9, 0xE4, 0xD0, 0xAA, 0xC3, 0x0F, 0xE3, 0x33]);
    HRESULT CreateVideoDecoder(const D3D11_VIDEO_DECODER_DESC * pVideoDesc, const D3D11_VIDEO_DECODER_CONFIG * pConfig, ID3D11VideoDecoder * ppDecoder);
    HRESULT CreateVideoProcessor(ID3D11VideoProcessorEnumerator  pEnum, UINT RateConversionIndex, ID3D11VideoProcessor * ppVideoProcessor);
    HRESULT CreateAuthenticatedChannel(D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ID3D11AuthenticatedChannel * ppAuthenticatedChannel);
    HRESULT CreateCryptoSession(const GUID * pCryptoType, const GUID * pDecoderProfile, const GUID * pKeyExchangeType, ID3D11CryptoSession * ppCryptoSession);
    HRESULT CreateVideoDecoderOutputView(ID3D11Resource  pResource, const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc, ID3D11VideoDecoderOutputView * ppVDOVView);
    HRESULT CreateVideoProcessorInputView(ID3D11Resource  pResource, ID3D11VideoProcessorEnumerator  pEnum, const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc, ID3D11VideoProcessorInputView * ppVPIView);
    HRESULT CreateVideoProcessorOutputView(ID3D11Resource  pResource, ID3D11VideoProcessorEnumerator  pEnum, const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc, ID3D11VideoProcessorOutputView * ppVPOView);
    HRESULT CreateVideoProcessorEnumerator(const D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc, ID3D11VideoProcessorEnumerator * ppEnum);
    UINT GetVideoDecoderProfileCount();
    HRESULT GetVideoDecoderProfile(UINT Index, GUID * pDecoderProfile);
    HRESULT CheckVideoDecoderFormat(const GUID * pDecoderProfile, DXGI_FORMAT Format, BOOL * pSupported);
    HRESULT GetVideoDecoderConfigCount(const D3D11_VIDEO_DECODER_DESC * pDesc, UINT * pCount);
    HRESULT GetVideoDecoderConfig(const D3D11_VIDEO_DECODER_DESC * pDesc, UINT Index, D3D11_VIDEO_DECODER_CONFIG * pConfig);
    HRESULT GetContentProtectionCaps(const GUID * pCryptoType, const GUID * pDecoderProfile, D3D11_VIDEO_CONTENT_PROTECTION_CAPS * pCaps);
    HRESULT CheckCryptoKeyExchange(const GUID * pCryptoType, const GUID * pDecoderProfile, UINT Index, GUID * pKeyExchangeType);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
}

interface ID3D11Device: IUnknown {
    static immutable uuidof = GUID(0xdb6f6ddb, 0xac77, 0x4e88, [0x82, 0x53, 0x81, 0x9d, 0xf9, 0xbb, 0xf1, 0x40]);
    HRESULT CreateBuffer(const D3D11_BUFFER_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Buffer * ppBuffer);
    HRESULT CreateTexture1D(const D3D11_TEXTURE1D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture1D * ppTexture1D);
    HRESULT CreateTexture2D(const D3D11_TEXTURE2D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture2D * ppTexture2D);
    HRESULT CreateTexture3D(const D3D11_TEXTURE3D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture3D * ppTexture3D);
    HRESULT CreateShaderResourceView(ID3D11Resource  pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc, ID3D11ShaderResourceView * ppSRView);
    HRESULT CreateUnorderedAccessView(ID3D11Resource  pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc, ID3D11UnorderedAccessView * ppUAView);
    HRESULT CreateRenderTargetView(ID3D11Resource  pResource, const D3D11_RENDER_TARGET_VIEW_DESC * pDesc, ID3D11RenderTargetView * ppRTView);
    HRESULT CreateDepthStencilView(ID3D11Resource  pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc, ID3D11DepthStencilView * ppDepthStencilView);
    HRESULT CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC * pInputElementDescs, UINT NumElements, const void * pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout * ppInputLayout);
    HRESULT CreateVertexShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11VertexShader * ppVertexShader);
    HRESULT CreateGeometryShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11GeometryShader * ppGeometryShader);
    HRESULT CreateGeometryShaderWithStreamOutput(const void * pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY * pSODeclaration, UINT NumEntries, const UINT * pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage  pClassLinkage, ID3D11GeometryShader * ppGeometryShader);
    HRESULT CreatePixelShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11PixelShader * ppPixelShader);
    HRESULT CreateHullShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11HullShader * ppHullShader);
    HRESULT CreateDomainShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11DomainShader * ppDomainShader);
    HRESULT CreateComputeShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11ComputeShader * ppComputeShader);
    HRESULT CreateClassLinkage(ID3D11ClassLinkage * ppLinkage);
    HRESULT CreateBlendState(const D3D11_BLEND_DESC * pBlendStateDesc, ID3D11BlendState * ppBlendState);
    HRESULT CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC * pDepthStencilDesc, ID3D11DepthStencilState * ppDepthStencilState);
    HRESULT CreateRasterizerState(const D3D11_RASTERIZER_DESC * pRasterizerDesc, ID3D11RasterizerState * ppRasterizerState);
    HRESULT CreateSamplerState(const D3D11_SAMPLER_DESC * pSamplerDesc, ID3D11SamplerState * ppSamplerState);
    HRESULT CreateQuery(const D3D11_QUERY_DESC * pQueryDesc, ID3D11Query * ppQuery);
    HRESULT CreatePredicate(const D3D11_QUERY_DESC * pPredicateDesc, ID3D11Predicate * ppPredicate);
    HRESULT CreateCounter(const D3D11_COUNTER_DESC * pCounterDesc, ID3D11Counter * ppCounter);
    HRESULT CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext * ppDeferredContext);
    HRESULT OpenSharedResource(HANDLE hResource, const IID * ReturnedInterface, void ** ppResource);
    HRESULT CheckFormatSupport(DXGI_FORMAT Format, UINT * pFormatSupport);
    HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT * pNumQualityLevels);
    void CheckCounterInfo(D3D11_COUNTER_INFO * pCounterInfo);
    HRESULT CheckCounter(const D3D11_COUNTER_DESC * pDesc, D3D11_COUNTER_TYPE * pType, UINT * pActiveCounters, LPSTR szName, UINT * pNameLength, LPSTR szUnits, UINT * pUnitsLength, LPSTR szDescription, UINT * pDescriptionLength);
    HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void * pFeatureSupportData, UINT FeatureSupportDataSize);
    HRESULT GetPrivateData(const GUID * guid, UINT * pDataSize, void * pData);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
    D3D_FEATURE_LEVEL GetFeatureLevel();
    UINT GetCreationFlags();
    HRESULT GetDeviceRemovedReason();
    void GetImmediateContext(ID3D11DeviceContext * ppImmediateContext);
    HRESULT SetExceptionMode(UINT RaiseFlags);
    UINT GetExceptionMode();
}

UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels);

HRESULT D3D11CreateDevice(IDXGIAdapter  pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL * pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device * ppDevice, D3D_FEATURE_LEVEL * pFeatureLevel, ID3D11DeviceContext * ppImmediateContext);

HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter  pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL * pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, const DXGI_SWAP_CHAIN_DESC * pSwapChainDesc, IDXGISwapChain * ppSwapChain, ID3D11Device * ppDevice, D3D_FEATURE_LEVEL * pFeatureLevel, ID3D11DeviceContext * ppImmediateContext);

}
