// pycpptool generated: 2019-04-15 21:18:23.031596
module windowskits.build_10_0_17763_0.d3d11;

import core.sys.windows.windef;
import core.sys.windows.com;
public import windowskits.build_10_0_17763_0.dxgi;
public import windowskits.build_10_0_17763_0.d3dcommon;

extern(Windows){

alias IID = GUID;


enum __REQUIRED_RPCNDR_H_VERSION__ = 500;
enum __REQUIRED_RPCSAL_H_VERSION__ = 100;
enum D3D11_16BIT_INDEX_STRIP_CUT_VALUE = ( 0xffff );
enum D3D11_32BIT_INDEX_STRIP_CUT_VALUE = ( 0xffffffff );
enum D3D11_8BIT_INDEX_STRIP_CUT_VALUE = ( 0xff );
enum D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
enum D3D11_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
enum D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
enum D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
enum D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
enum D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
enum D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( - 10 );
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( - 8 );
enum D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
enum D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
enum D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
enum D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
enum D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
enum D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
enum D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
enum D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
enum D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
enum D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
enum D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
enum D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
enum D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
enum D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
enum D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
enum D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
enum D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
enum D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
enum D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
enum D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
enum D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
enum D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
enum D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
enum D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
enum D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
enum D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
enum D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
enum D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
enum D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
enum D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
enum D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
enum D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
enum D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
enum D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
enum D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
enum D3D11_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
enum D3D11_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
enum D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
enum D3D11_CS_TGSM_REGISTER_COUNT = ( 8192 );
enum D3D11_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
enum D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
enum D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
enum D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
enum D3D11_CS_THREADID_REGISTER_COUNT = ( 1 );
enum D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_X = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_Y = ( 1024 );
enum D3D11_CS_THREAD_GROUP_MAX_Z = ( 64 );
enum D3D11_CS_THREAD_GROUP_MIN_X = ( 1 );
enum D3D11_CS_THREAD_GROUP_MIN_Y = ( 1 );
enum D3D11_CS_THREAD_GROUP_MIN_Z = ( 1 );
enum D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
enum D3D11_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
enum D3D11_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
enum D3D11_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D11_DEFAULT_DEPTH_BIAS = ( 0 );
enum D3D11_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
enum D3D11_DEFAULT_MAX_ANISOTROPY = ( 16 );
enum D3D11_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
enum D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
enum D3D11_DEFAULT_SAMPLE_MASK = ( 0xffffffff );
enum D3D11_DEFAULT_SCISSOR_ENDX = ( 0 );
enum D3D11_DEFAULT_SCISSOR_ENDY = ( 0 );
enum D3D11_DEFAULT_SCISSOR_STARTX = ( 0 );
enum D3D11_DEFAULT_SCISSOR_STARTY = ( 0 );
enum D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
enum D3D11_DEFAULT_STENCIL_READ_MASK = ( 0xff );
enum D3D11_DEFAULT_STENCIL_REFERENCE = ( 0 );
enum D3D11_DEFAULT_STENCIL_WRITE_MASK = ( 0xff );
enum D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
enum D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
enum D3D11_DEFAULT_VIEWPORT_WIDTH = ( 0 );
enum D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_DS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
enum D3D11_FLOAT32_MAX = ( 3.402823466e+38f );
enum D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
enum D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
enum D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
enum D3D11_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
enum D3D11_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
enum D3D11_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
enum D3D11_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
enum D3D11_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
enum D3D11_FTOI_INSTRUCTION_MIN_INPUT = ( - 2147483648.999f );
enum D3D11_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
enum D3D11_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
enum D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_GS_INPUT_REGISTER_VERTICES = ( 32 );
enum D3D11_GS_MAX_INSTANCE_COUNT = ( 32 );
enum D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
enum D3D11_GS_OUTPUT_ELEMENTS = ( 32 );
enum D3D11_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_GS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
enum D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
enum D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
enum D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
enum D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
enum D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
enum D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
enum D3D11_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
enum D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
enum D3D11_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_ID_BIT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
enum D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
enum D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( 0xffffffff );
enum D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( 0xffffffff );
enum D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( 0xffffffff );
enum D3D11_KEEP_UNORDERED_ACCESS_VIEWS = ( 0xffffffff );
enum D3D11_LINEAR_GAMMA = ( 1.0f );
enum D3D11_MAJOR_VERSION = ( 11 );
enum D3D11_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
enum D3D11_MAX_DEPTH = ( 1.0f );
enum D3D11_MAX_MAXANISOTROPY = ( 16 );
enum D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
enum D3D11_MAX_POSITION_VALUE = ( 3.402823466e+34f );
enum D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
enum D3D11_MINOR_VERSION = ( 0 );
enum D3D11_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
enum D3D11_MIN_DEPTH = ( 0.0f );
enum D3D11_MIN_MAXANISOTROPY = ( 0 );
enum D3D11_MIP_LOD_BIAS_MAX = ( 15.99f );
enum D3D11_MIP_LOD_BIAS_MIN = ( - 16.0f );
enum D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
enum D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
enum D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
enum D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
enum D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D11_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_CS_UAV_REGISTER_COUNT = ( 8 );
enum D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
enum D3D11_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
enum D3D11_PS_FRONTFACING_DEFAULT_VALUE = ( 0xffffffff );
enum D3D11_PS_FRONTFACING_FALSE_VALUE = ( 0 );
enum D3D11_PS_FRONTFACING_TRUE_VALUE = ( 0xffffffff );
enum D3D11_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
enum D3D11_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_PS_OUTPUT_REGISTER_COUNT = ( 8 );
enum D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
enum D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
enum D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
enum D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
enum D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
enum D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
enum D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
enum D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
enum D3D11_REQ_MAXANISOTROPY = ( 16 );
enum D3D11_REQ_MIP_LEVELS = ( 15 );
enum D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
enum D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
enum D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
enum D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
enum D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
enum D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
enum D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
enum D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
enum D3D11_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
enum D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
enum D3D11_SHADER_MAJOR_VERSION = ( 5 );
enum D3D11_SHADER_MAX_INSTANCES = ( 65535 );
enum D3D11_SHADER_MAX_INTERFACES = ( 253 );
enum D3D11_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
enum D3D11_SHADER_MAX_TYPES = ( 65535 );
enum D3D11_SHADER_MINOR_VERSION = ( 0 );
enum D3D11_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
enum D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
enum D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
enum D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
enum D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
enum D3D11_SO_BUFFER_SLOT_COUNT = ( 4 );
enum D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( 0xffffffff );
enum D3D11_SO_NO_RASTERIZED_STREAM = ( 0xffffffff );
enum D3D11_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
enum D3D11_SO_STREAM_COUNT = ( 4 );
enum D3D11_SPEC_DATE_DAY = ( 16 );
enum D3D11_SPEC_DATE_MONTH = ( 05 );
enum D3D11_SPEC_DATE_YEAR = ( 2011 );
enum D3D11_SPEC_VERSION = ( 1.07 );
enum D3D11_SRGB_GAMMA = ( 2.2f );
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
enum D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
enum D3D11_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
enum D3D11_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
enum D3D11_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
enum D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
enum D3D11_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
enum D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
enum D3D11_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
enum D3D11_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
enum D3D11_STANDARD_VECTOR_SIZE = ( 4 );
enum D3D11_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
enum D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
enum D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
enum D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
enum D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
enum D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
enum D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
enum D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
enum D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
enum D3D11_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
enum D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
enum D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
enum D3D11_VIEWPORT_BOUNDS_MAX = ( 32767 );
enum D3D11_VIEWPORT_BOUNDS_MIN = ( - 32768 );
enum D3D11_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_VS_INPUT_REGISTER_COUNT = ( 32 );
enum D3D11_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
enum D3D11_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
enum D3D11_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
enum D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
enum D3D11_VS_OUTPUT_REGISTER_COUNT = ( 32 );
enum D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
enum D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
enum D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
enum D3D11_1_UAV_SLOT_COUNT = ( 64 );
enum D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
enum D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = ( 4 );
enum D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
enum _FACD3D11 = ( 0x87c );
enum _FACD3D11DEBUG = ( ( _FACD3D11 + 1 ) );
enum D3D11_APPEND_ALIGNED_ELEMENT = ( 0xffffffff );
enum D3D11_FILTER_REDUCTION_TYPE_MASK = ( 0x3 );
enum D3D11_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
enum D3D11_FILTER_TYPE_MASK = ( 0x3 );
enum D3D11_MIN_FILTER_SHIFT = ( 4 );
enum D3D11_MAG_FILTER_SHIFT = ( 2 );
enum D3D11_MIP_FILTER_SHIFT = ( 0 );
enum D3D11_COMPARISON_FILTERING_BIT = ( 0x80 );
enum D3D11_ANISOTROPIC_FILTERING_BIT = ( 0x40 );
enum D3D11_SDK_VERSION = ( 7 );
enum D3D11_INPUT_CLASSIFICATION {
    D3D11_INPUT_PER_VERTEX_DATA = 0x00000000,
    D3D11_INPUT_PER_INSTANCE_DATA = 0x00000001,
}

struct D3D11_INPUT_ELEMENT_DESC{
  LPCSTR SemanticName;
  UINT SemanticIndex;
  DXGI_FORMAT Format;
  UINT InputSlot;
  UINT AlignedByteOffset;
  D3D11_INPUT_CLASSIFICATION InputSlotClass;
  UINT InstanceDataStepRate;
}

enum D3D11_FILL_MODE {
    WIREFRAME = 0x00000002,
    SOLID = 0x00000003,
}

alias D3D11_PRIMITIVE_TOPOLOGY = D3D_PRIMITIVE_TOPOLOGY;

alias D3D11_PRIMITIVE = D3D_PRIMITIVE;

enum D3D11_CULL_MODE {
    NONE = 0x00000001,
    FRONT = 0x00000002,
    BACK = 0x00000003,
}

struct D3D11_SO_DECLARATION_ENTRY{
  UINT Stream;
  LPCSTR SemanticName;
  UINT SemanticIndex;
  BYTE StartComponent;
  BYTE ComponentCount;
  BYTE OutputSlot;
}

struct D3D11_VIEWPORT{
  FLOAT TopLeftX;
  FLOAT TopLeftY;
  FLOAT Width;
  FLOAT Height;
  FLOAT MinDepth;
  FLOAT MaxDepth;
}

struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS{
  UINT VertexCountPerInstance;
  UINT InstanceCount;
  UINT StartVertexLocation;
  UINT StartInstanceLocation;
}

struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS{
  UINT IndexCountPerInstance;
  UINT InstanceCount;
  UINT StartIndexLocation;
  INT BaseVertexLocation;
  UINT StartInstanceLocation;
}

enum D3D11_RESOURCE_DIMENSION {
    UNKNOWN = 0x00000000,
    BUFFER = 0x00000001,
    TEXTURE1D = 0x00000002,
    TEXTURE2D = 0x00000003,
    TEXTURE3D = 0x00000004,
}

alias D3D11_SRV_DIMENSION = D3D_SRV_DIMENSION;

enum D3D11_DSV_DIMENSION {
    UNKNOWN = 0x00000000,
    TEXTURE1D = 0x00000001,
    TEXTURE1DARRAY = 0x00000002,
    TEXTURE2D = 0x00000003,
    TEXTURE2DARRAY = 0x00000004,
    TEXTURE2DMS = 0x00000005,
    TEXTURE2DMSARRAY = 0x00000006,
}

enum D3D11_RTV_DIMENSION {
    UNKNOWN = 0x00000000,
    BUFFER = 0x00000001,
    TEXTURE1D = 0x00000002,
    TEXTURE1DARRAY = 0x00000003,
    TEXTURE2D = 0x00000004,
    TEXTURE2DARRAY = 0x00000005,
    TEXTURE2DMS = 0x00000006,
    TEXTURE2DMSARRAY = 0x00000007,
    TEXTURE3D = 0x00000008,
}

enum D3D11_UAV_DIMENSION {
    UNKNOWN = 0x00000000,
    BUFFER = 0x00000001,
    TEXTURE1D = 0x00000002,
    TEXTURE1DARRAY = 0x00000003,
    TEXTURE2D = 0x00000004,
    TEXTURE2DARRAY = 0x00000005,
    TEXTURE3D = 0x00000008,
}

enum D3D11_USAGE {
    DEFAULT = 0x00000000,
    IMMUTABLE = 0x00000001,
    DYNAMIC = 0x00000002,
    STAGING = 0x00000003,
}

enum D3D11_BIND_FLAG {
    VERTEX_BUFFER = 0x00000001,
    INDEX_BUFFER = 0x00000002,
    CONSTANT_BUFFER = 0x00000004,
    SHADER_RESOURCE = 0x00000008,
    STREAM_OUTPUT = 0x00000010,
    RENDER_TARGET = 0x00000020,
    DEPTH_STENCIL = 0x00000040,
    UNORDERED_ACCESS = 0x00000080,
    DECODER = 0x00000200,
    VIDEO_ENCODER = 0x00000400,
}

enum D3D11_CPU_ACCESS_FLAG {
    WRITE = 0x00010000,
    READ = 0x00020000,
}

enum D3D11_RESOURCE_MISC_FLAG {
    GENERATE_MIPS = 0x00000001,
    SHARED = 0x00000002,
    TEXTURECUBE = 0x00000004,
    DRAWINDIRECT_ARGS = 0x00000010,
    BUFFER_ALLOW_RAW_VIEWS = 0x00000020,
    BUFFER_STRUCTURED = 0x00000040,
    RESOURCE_CLAMP = 0x00000080,
    SHARED_KEYEDMUTEX = 0x00000100,
    GDI_COMPATIBLE = 0x00000200,
    SHARED_NTHANDLE = 0x00000800,
    RESTRICTED_CONTENT = 0x00001000,
    RESTRICT_SHARED_RESOURCE = 0x00002000,
    RESTRICT_SHARED_RESOURCE_DRIVER = 0x00004000,
    GUARDED = 0x00008000,
    TILE_POOL = 0x00020000,
    TILED = 0x00040000,
    HW_PROTECTED = 0x00080000,
}

enum D3D11_MAP {
    READ = 0x00000001,
    WRITE = 0x00000002,
    READ_WRITE = 0x00000003,
    WRITE_DISCARD = 0x00000004,
    WRITE_NO_OVERWRITE = 0x00000005,
}

enum D3D11_MAP_FLAG {
    DO_NOT_WAIT = 0x00100000,
}

enum D3D11_RAISE_FLAG {
    DRIVER_INTERNAL_ERROR = 0x00000001,
}

enum D3D11_CLEAR_FLAG {
    DEPTH = 0x00000001,
    STENCIL = 0x00000002,
}

alias D3D11_RECT = RECT;

struct D3D11_BOX{
  UINT left;
  UINT top;
  UINT front;
  UINT right;
  UINT bottom;
  UINT back;
}

interface ID3D11DeviceChild: IUnknown {
    static immutable iidof = GUID(0x1841e5c8, 0x16b0, 0x489b, [0xbc, 0xc8, 0x44, 0xcf, 0xb0, 0xd5, 0xde, 0xae]);
    void GetDevice(ID3D11Device * ppDevice);
    HRESULT GetPrivateData(const GUID * guid, UINT * pDataSize, void * pData);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
}

enum D3D11_COMPARISON_FUNC {
    D3D11_COMPARISON_NEVER = 0x00000001,
    D3D11_COMPARISON_LESS = 0x00000002,
    D3D11_COMPARISON_EQUAL = 0x00000003,
    D3D11_COMPARISON_LESS_EQUAL = 0x00000004,
    D3D11_COMPARISON_GREATER = 0x00000005,
    D3D11_COMPARISON_NOT_EQUAL = 0x00000006,
    D3D11_COMPARISON_GREATER_EQUAL = 0x00000007,
    D3D11_COMPARISON_ALWAYS = 0x00000008,
}

enum D3D11_DEPTH_WRITE_MASK {
    ZERO = 0x00000000,
    ALL = 0x00000001,
}

enum D3D11_STENCIL_OP {
    KEEP = 0x00000001,
    ZERO = 0x00000002,
    REPLACE = 0x00000003,
    INCR_SAT = 0x00000004,
    DECR_SAT = 0x00000005,
    INVERT = 0x00000006,
    INCR = 0x00000007,
    DECR = 0x00000008,
}

struct D3D11_DEPTH_STENCILOP_DESC{
  D3D11_STENCIL_OP StencilFailOp;
  D3D11_STENCIL_OP StencilDepthFailOp;
  D3D11_STENCIL_OP StencilPassOp;
  D3D11_COMPARISON_FUNC StencilFunc;
}

struct D3D11_DEPTH_STENCIL_DESC{
  BOOL DepthEnable;
  D3D11_DEPTH_WRITE_MASK DepthWriteMask;
  D3D11_COMPARISON_FUNC DepthFunc;
  BOOL StencilEnable;
  UINT8 StencilReadMask;
  UINT8 StencilWriteMask;
  D3D11_DEPTH_STENCILOP_DESC FrontFace;
  D3D11_DEPTH_STENCILOP_DESC BackFace;
}

interface ID3D11DepthStencilState: ID3D11DeviceChild {
    static immutable iidof = GUID(0x03823efb, 0x8d8f, 0x4e1c, [0x9a, 0xa2, 0xf6, 0x4b, 0xb2, 0xcb, 0xfd, 0xf1]);
    void GetDesc(D3D11_DEPTH_STENCIL_DESC * pDesc);
}

enum D3D11_BLEND {
    ZERO = 0x00000001,
    ONE = 0x00000002,
    SRC_COLOR = 0x00000003,
    INV_SRC_COLOR = 0x00000004,
    SRC_ALPHA = 0x00000005,
    INV_SRC_ALPHA = 0x00000006,
    DEST_ALPHA = 0x00000007,
    INV_DEST_ALPHA = 0x00000008,
    DEST_COLOR = 0x00000009,
    INV_DEST_COLOR = 0x0000000a,
    SRC_ALPHA_SAT = 0x0000000b,
    BLEND_FACTOR = 0x0000000e,
    INV_BLEND_FACTOR = 0x0000000f,
    SRC1_COLOR = 0x00000010,
    INV_SRC1_COLOR = 0x00000011,
    SRC1_ALPHA = 0x00000012,
    INV_SRC1_ALPHA = 0x00000013,
}

enum D3D11_BLEND_OP {
    ADD = 0x00000001,
    SUBTRACT = 0x00000002,
    REV_SUBTRACT = 0x00000003,
    MIN = 0x00000004,
    MAX = 0x00000005,
}

enum D3D11_COLOR_WRITE_ENABLE {
    RED = 0x00000001,
    GREEN = 0x00000002,
    BLUE = 0x00000004,
    ALPHA = 0x00000008,
    ALL = 0x0000000f,
}

struct D3D11_RENDER_TARGET_BLEND_DESC{
  BOOL BlendEnable;
  D3D11_BLEND SrcBlend;
  D3D11_BLEND DestBlend;
  D3D11_BLEND_OP BlendOp;
  D3D11_BLEND SrcBlendAlpha;
  D3D11_BLEND DestBlendAlpha;
  D3D11_BLEND_OP BlendOpAlpha;
  UINT8 RenderTargetWriteMask;
}

struct D3D11_BLEND_DESC{
  BOOL AlphaToCoverageEnable;
  BOOL IndependentBlendEnable;
  D3D11_RENDER_TARGET_BLEND_DESC [8] RenderTarget;
}

interface ID3D11BlendState: ID3D11DeviceChild {
    static immutable iidof = GUID(0x75b68faa, 0x347d, 0x4159, [0x8f, 0x45, 0xa0, 0x64, 0x0f, 0x01, 0xcd, 0x9a]);
    void GetDesc(D3D11_BLEND_DESC * pDesc);
}

struct D3D11_RASTERIZER_DESC{
  D3D11_FILL_MODE FillMode;
  D3D11_CULL_MODE CullMode;
  BOOL FrontCounterClockwise;
  INT DepthBias;
  FLOAT DepthBiasClamp;
  FLOAT SlopeScaledDepthBias;
  BOOL DepthClipEnable;
  BOOL ScissorEnable;
  BOOL MultisampleEnable;
  BOOL AntialiasedLineEnable;
}

interface ID3D11RasterizerState: ID3D11DeviceChild {
    static immutable iidof = GUID(0x9bb4ab81, 0xab1a, 0x4d8f, [0xb5, 0x06, 0xfc, 0x04, 0x20, 0x0b, 0x6e, 0xe7]);
    void GetDesc(D3D11_RASTERIZER_DESC * pDesc);
}

UINT D3D11CalcSubresource(UINT MipSlice, UINT ArraySlice, UINT MipLevels);

struct D3D11_SUBRESOURCE_DATA{
  const void * pSysMem;
  UINT SysMemPitch;
  UINT SysMemSlicePitch;
}

struct D3D11_MAPPED_SUBRESOURCE{
  void * pData;
  UINT RowPitch;
  UINT DepthPitch;
}

interface ID3D11Resource: ID3D11DeviceChild {
    static immutable iidof = GUID(0xdc8e63f3, 0xd12b, 0x4952, [0xb4, 0x7b, 0x5e, 0x45, 0x02, 0x6a, 0x86, 0x2d]);
    void GetType(D3D11_RESOURCE_DIMENSION * pResourceDimension);
    void SetEvictionPriority(UINT EvictionPriority);
    UINT GetEvictionPriority();
}

struct D3D11_BUFFER_DESC{
  UINT ByteWidth;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
  UINT StructureByteStride;
}

interface ID3D11Buffer: ID3D11Resource {
    static immutable iidof = GUID(0x48570b85, 0xd1ee, 0x4fcd, [0xa2, 0x50, 0xeb, 0x35, 0x07, 0x22, 0xb0, 0x37]);
    void GetDesc(D3D11_BUFFER_DESC * pDesc);
}

struct D3D11_TEXTURE1D_DESC{
  UINT Width;
  UINT MipLevels;
  UINT ArraySize;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

interface ID3D11Texture1D: ID3D11Resource {
    static immutable iidof = GUID(0xf8fb5c27, 0xc6b3, 0x4f75, [0xa4, 0xc8, 0x43, 0x9a, 0xf2, 0xef, 0x56, 0x4c]);
    void GetDesc(D3D11_TEXTURE1D_DESC * pDesc);
}

struct D3D11_TEXTURE2D_DESC{
  UINT Width;
  UINT Height;
  UINT MipLevels;
  UINT ArraySize;
  DXGI_FORMAT Format;
  DXGI_SAMPLE_DESC SampleDesc;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

interface ID3D11Texture2D: ID3D11Resource {
    static immutable iidof = GUID(0x6f15aaf2, 0xd208, 0x4e89, [0x9a, 0xb4, 0x48, 0x95, 0x35, 0xd3, 0x4f, 0x9c]);
    void GetDesc(D3D11_TEXTURE2D_DESC * pDesc);
}

struct D3D11_TEXTURE3D_DESC{
  UINT Width;
  UINT Height;
  UINT Depth;
  UINT MipLevels;
  DXGI_FORMAT Format;
  D3D11_USAGE Usage;
  UINT BindFlags;
  UINT CPUAccessFlags;
  UINT MiscFlags;
}

interface ID3D11Texture3D: ID3D11Resource {
    static immutable iidof = GUID(0x037e866e, 0xf56d, 0x4357, [0xa8, 0xaf, 0x9d, 0xab, 0xbe, 0x6e, 0x25, 0x0e]);
    void GetDesc(D3D11_TEXTURE3D_DESC * pDesc);
}

enum D3D11_TEXTURECUBE_FACE {
    POSITIVE_X = 0x00000000,
    NEGATIVE_X = 0x00000001,
    POSITIVE_Y = 0x00000002,
    NEGATIVE_Y = 0x00000003,
    POSITIVE_Z = 0x00000004,
    NEGATIVE_Z = 0x00000005,
}

interface ID3D11View: ID3D11DeviceChild {
    static immutable iidof = GUID(0x839d1216, 0xbb2e, 0x412b, [0xb7, 0xf4, 0xa9, 0xdb, 0xeb, 0xe0, 0x8e, 0xd1]);
    void GetResource(ID3D11Resource * ppResource);
}

struct D3D11_BUFFER_SRV{
  union {
    UINT FirstElement;
    UINT ElementOffset;
  }
  union {
    UINT NumElements;
    UINT ElementWidth;
  }
}

enum D3D11_BUFFEREX_SRV_FLAG {
    RAW = 0x00000001,
}

struct D3D11_BUFFEREX_SRV{
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
}

struct D3D11_TEX1D_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEX1D_ARRAY_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEX2D_ARRAY_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEXCUBE_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
}

struct D3D11_TEXCUBE_ARRAY_SRV{
  UINT MostDetailedMip;
  UINT MipLevels;
  UINT First2DArrayFace;
  UINT NumCubes;
}

struct D3D11_TEX2DMS_SRV{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_SRV{
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_SHADER_RESOURCE_VIEW_DESC{
  DXGI_FORMAT Format;
  D3D11_SRV_DIMENSION ViewDimension;
  union {
    D3D11_BUFFER_SRV Buffer;
    D3D11_TEX1D_SRV Texture1D;
    D3D11_TEX1D_ARRAY_SRV Texture1DArray;
    D3D11_TEX2D_SRV Texture2D;
    D3D11_TEX2D_ARRAY_SRV Texture2DArray;
    D3D11_TEX2DMS_SRV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
    D3D11_TEX3D_SRV Texture3D;
    D3D11_TEXCUBE_SRV TextureCube;
    D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
    D3D11_BUFFEREX_SRV BufferEx;
  }
}

interface ID3D11ShaderResourceView: ID3D11View {
    static immutable iidof = GUID(0xb0e06fe0, 0x8192, 0x4e1a, [0xb1, 0xca, 0x36, 0xd7, 0x41, 0x47, 0x10, 0xb2]);
    void GetDesc(D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc);
}

struct D3D11_BUFFER_RTV{
  union {
    UINT FirstElement;
    UINT ElementOffset;
  }
  union {
    UINT NumElements;
    UINT ElementWidth;
  }
}

struct D3D11_TEX1D_RTV{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_RTV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_RTV{
  UINT MipSlice;
}

struct D3D11_TEX2DMS_RTV{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2D_ARRAY_RTV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2DMS_ARRAY_RTV{
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_RTV{
  UINT MipSlice;
  UINT FirstWSlice;
  UINT WSize;
}

struct D3D11_RENDER_TARGET_VIEW_DESC{
  DXGI_FORMAT Format;
  D3D11_RTV_DIMENSION ViewDimension;
  union {
    D3D11_BUFFER_RTV Buffer;
    D3D11_TEX1D_RTV Texture1D;
    D3D11_TEX1D_ARRAY_RTV Texture1DArray;
    D3D11_TEX2D_RTV Texture2D;
    D3D11_TEX2D_ARRAY_RTV Texture2DArray;
    D3D11_TEX2DMS_RTV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
    D3D11_TEX3D_RTV Texture3D;
  }
}

interface ID3D11RenderTargetView: ID3D11View {
    static immutable iidof = GUID(0xdfdba067, 0x0b8d, 0x4865, [0x87, 0x5b, 0xd7, 0xb4, 0x51, 0x6c, 0xc1, 0x64]);
    void GetDesc(D3D11_RENDER_TARGET_VIEW_DESC * pDesc);
}

struct D3D11_TEX1D_DSV{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_DSV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_DSV{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_DSV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2DMS_DSV{
  UINT UnusedField_NothingToDefine;
}

struct D3D11_TEX2DMS_ARRAY_DSV{
  UINT FirstArraySlice;
  UINT ArraySize;
}

enum D3D11_DSV_FLAG {
    READ_ONLY_DEPTH = 0x00000001,
    READ_ONLY_STENCIL = 0x00000002,
}

struct D3D11_DEPTH_STENCIL_VIEW_DESC{
  DXGI_FORMAT Format;
  D3D11_DSV_DIMENSION ViewDimension;
  UINT Flags;
  union {
    D3D11_TEX1D_DSV Texture1D;
    D3D11_TEX1D_ARRAY_DSV Texture1DArray;
    D3D11_TEX2D_DSV Texture2D;
    D3D11_TEX2D_ARRAY_DSV Texture2DArray;
    D3D11_TEX2DMS_DSV Texture2DMS;
    D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
  }
}

interface ID3D11DepthStencilView: ID3D11View {
    static immutable iidof = GUID(0x9fdac92a, 0x1876, 0x48c3, [0xaf, 0xad, 0x25, 0xb9, 0x4f, 0x84, 0xa9, 0xb6]);
    void GetDesc(D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc);
}

enum D3D11_BUFFER_UAV_FLAG {
    RAW = 0x00000001,
    APPEND = 0x00000002,
    COUNTER = 0x00000004,
}

struct D3D11_BUFFER_UAV{
  UINT FirstElement;
  UINT NumElements;
  UINT Flags;
}

struct D3D11_TEX1D_UAV{
  UINT MipSlice;
}

struct D3D11_TEX1D_ARRAY_UAV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX2D_UAV{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_UAV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_TEX3D_UAV{
  UINT MipSlice;
  UINT FirstWSlice;
  UINT WSize;
}

struct D3D11_UNORDERED_ACCESS_VIEW_DESC{
  DXGI_FORMAT Format;
  D3D11_UAV_DIMENSION ViewDimension;
  union {
    D3D11_BUFFER_UAV Buffer;
    D3D11_TEX1D_UAV Texture1D;
    D3D11_TEX1D_ARRAY_UAV Texture1DArray;
    D3D11_TEX2D_UAV Texture2D;
    D3D11_TEX2D_ARRAY_UAV Texture2DArray;
    D3D11_TEX3D_UAV Texture3D;
  }
}

interface ID3D11UnorderedAccessView: ID3D11View {
    static immutable iidof = GUID(0x28acf509, 0x7f5c, 0x48f6, [0x86, 0x11, 0xf3, 0x16, 0x01, 0x0a, 0x63, 0x80]);
    void GetDesc(D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc);
}

interface ID3D11VertexShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0x3b301d64, 0xd678, 0x4289, [0x88, 0x97, 0x22, 0xf8, 0x92, 0x8b, 0x72, 0xf3]);
}

interface ID3D11HullShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0x8e5c6061, 0x628a, 0x4c8e, [0x82, 0x64, 0xbb, 0xe4, 0x5c, 0xb3, 0xd5, 0xdd]);
}

interface ID3D11DomainShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0xf582c508, 0x0f36, 0x490c, [0x99, 0x77, 0x31, 0xee, 0xce, 0x26, 0x8c, 0xfa]);
}

interface ID3D11GeometryShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0x38325b96, 0xeffb, 0x4022, [0xba, 0x02, 0x2e, 0x79, 0x5b, 0x70, 0x27, 0x5c]);
}

interface ID3D11PixelShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0xea82e40d, 0x51dc, 0x4f33, [0x93, 0xd4, 0xdb, 0x7c, 0x91, 0x25, 0xae, 0x8c]);
}

interface ID3D11ComputeShader: ID3D11DeviceChild {
    static immutable iidof = GUID(0x4f5b196e, 0xc2bd, 0x495e, [0xbd, 0x01, 0x1f, 0xde, 0xd3, 0x8e, 0x49, 0x69]);
}

interface ID3D11InputLayout: ID3D11DeviceChild {
    static immutable iidof = GUID(0xe4819ddc, 0x4cf0, 0x4025, [0xbd, 0x26, 0x5d, 0xe8, 0x2a, 0x3e, 0x07, 0xb7]);
}

enum D3D11_FILTER {
    MIN_MAG_MIP_POINT = 0x00000000,
    MIN_MAG_POINT_MIP_LINEAR = 0x00000001,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000004,
    MIN_POINT_MAG_MIP_LINEAR = 0x00000005,
    MIN_LINEAR_MAG_MIP_POINT = 0x00000010,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000011,
    MIN_MAG_LINEAR_MIP_POINT = 0x00000014,
    MIN_MAG_MIP_LINEAR = 0x00000015,
    ANISOTROPIC = 0x00000055,
    COMPARISON_MIN_MAG_MIP_POINT = 0x00000080,
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x00000081,
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000084,
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x00000085,
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x00000090,
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000091,
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x00000094,
    COMPARISON_MIN_MAG_MIP_LINEAR = 0x00000095,
    COMPARISON_ANISOTROPIC = 0x000000d5,
    MINIMUM_MIN_MAG_MIP_POINT = 0x00000100,
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000101,
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000104,
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000105,
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000110,
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000111,
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000114,
    MINIMUM_MIN_MAG_MIP_LINEAR = 0x00000115,
    MINIMUM_ANISOTROPIC = 0x00000155,
    MAXIMUM_MIN_MAG_MIP_POINT = 0x00000180,
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x00000181,
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x00000184,
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x00000185,
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x00000190,
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x00000191,
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x00000194,
    MAXIMUM_MIN_MAG_MIP_LINEAR = 0x00000195,
    MAXIMUM_ANISOTROPIC = 0x000001d5,
}

enum D3D11_FILTER_TYPE {
    POINT = 0x00000000,
    LINEAR = 0x00000001,
}

enum D3D11_FILTER_REDUCTION_TYPE {
    STANDARD = 0x00000000,
    COMPARISON = 0x00000001,
    MINIMUM = 0x00000002,
    MAXIMUM = 0x00000003,
}

enum D3D11_TEXTURE_ADDRESS_MODE {
    WRAP = 0x00000001,
    MIRROR = 0x00000002,
    CLAMP = 0x00000003,
    BORDER = 0x00000004,
    MIRROR_ONCE = 0x00000005,
}

struct D3D11_SAMPLER_DESC{
  D3D11_FILTER Filter;
  D3D11_TEXTURE_ADDRESS_MODE AddressU;
  D3D11_TEXTURE_ADDRESS_MODE AddressV;
  D3D11_TEXTURE_ADDRESS_MODE AddressW;
  FLOAT MipLODBias;
  UINT MaxAnisotropy;
  D3D11_COMPARISON_FUNC ComparisonFunc;
  FLOAT [4] BorderColor;
  FLOAT MinLOD;
  FLOAT MaxLOD;
}

interface ID3D11SamplerState: ID3D11DeviceChild {
    static immutable iidof = GUID(0xda6fea51, 0x564c, 0x4487, [0x98, 0x10, 0xf0, 0xd0, 0xf9, 0xb4, 0xe3, 0xa5]);
    void GetDesc(D3D11_SAMPLER_DESC * pDesc);
}

enum D3D11_FORMAT_SUPPORT {
    BUFFER = 0x00000001,
    IA_VERTEX_BUFFER = 0x00000002,
    IA_INDEX_BUFFER = 0x00000004,
    SO_BUFFER = 0x00000008,
    TEXTURE1D = 0x00000010,
    TEXTURE2D = 0x00000020,
    TEXTURE3D = 0x00000040,
    TEXTURECUBE = 0x00000080,
    SHADER_LOAD = 0x00000100,
    SHADER_SAMPLE = 0x00000200,
    SHADER_SAMPLE_COMPARISON = 0x00000400,
    SHADER_SAMPLE_MONO_TEXT = 0x00000800,
    MIP = 0x00001000,
    MIP_AUTOGEN = 0x00002000,
    RENDER_TARGET = 0x00004000,
    BLENDABLE = 0x00008000,
    DEPTH_STENCIL = 0x00010000,
    CPU_LOCKABLE = 0x00020000,
    MULTISAMPLE_RESOLVE = 0x00040000,
    DISPLAY = 0x00080000,
    CAST_WITHIN_BIT_LAYOUT = 0x00100000,
    MULTISAMPLE_RENDERTARGET = 0x00200000,
    MULTISAMPLE_LOAD = 0x00400000,
    SHADER_GATHER = 0x00800000,
    BACK_BUFFER_CAST = 0x01000000,
    TYPED_UNORDERED_ACCESS_VIEW = 0x02000000,
    SHADER_GATHER_COMPARISON = 0x04000000,
    DECODER_OUTPUT = 0x08000000,
    VIDEO_PROCESSOR_OUTPUT = 0x10000000,
    VIDEO_PROCESSOR_INPUT = 0x20000000,
    VIDEO_ENCODER = 0x40000000,
}

enum D3D11_FORMAT_SUPPORT2 {
    UAV_ATOMIC_ADD = 0x00000001,
    UAV_ATOMIC_BITWISE_OPS = 0x00000002,
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x00000004,
    UAV_ATOMIC_EXCHANGE = 0x00000008,
    UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x00000010,
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x00000020,
    UAV_TYPED_LOAD = 0x00000040,
    UAV_TYPED_STORE = 0x00000080,
    OUTPUT_MERGER_LOGIC_OP = 0x00000100,
    TILED = 0x00000200,
    SHAREABLE = 0x00000400,
    MULTIPLANE_OVERLAY = 0x00004000,
}

interface ID3D11Asynchronous: ID3D11DeviceChild {
    static immutable iidof = GUID(0x4b35d0cd, 0x1e15, 0x4258, [0x9c, 0x98, 0x1b, 0x13, 0x33, 0xf6, 0xdd, 0x3b]);
    UINT GetDataSize();
}

enum D3D11_ASYNC_GETDATA_FLAG {
    DONOTFLUSH = 0x00000001,
}

enum D3D11_QUERY {
    EVENT = 0x00000000,
    OCCLUSION = 0x00000001,
    TIMESTAMP = 0x00000002,
    TIMESTAMP_DISJOINT = 0x00000003,
    PIPELINE_STATISTICS = 0x00000004,
    OCCLUSION_PREDICATE = 0x00000005,
    SO_STATISTICS = 0x00000006,
    SO_OVERFLOW_PREDICATE = 0x00000007,
    SO_STATISTICS_STREAM0 = 0x00000008,
    SO_OVERFLOW_PREDICATE_STREAM0 = 0x00000009,
    SO_STATISTICS_STREAM1 = 0x0000000a,
    SO_OVERFLOW_PREDICATE_STREAM1 = 0x0000000b,
    SO_STATISTICS_STREAM2 = 0x0000000c,
    SO_OVERFLOW_PREDICATE_STREAM2 = 0x0000000d,
    SO_STATISTICS_STREAM3 = 0x0000000e,
    SO_OVERFLOW_PREDICATE_STREAM3 = 0x0000000f,
}

enum D3D11_QUERY_MISC_FLAG {
    PREDICATEHINT = 0x00000001,
}

struct D3D11_QUERY_DESC{
  D3D11_QUERY Query;
  UINT MiscFlags;
}

interface ID3D11Query: ID3D11Asynchronous {
    static immutable iidof = GUID(0xd6c00747, 0x87b7, 0x425e, [0xb8, 0x4d, 0x44, 0xd1, 0x08, 0x56, 0x0a, 0xfd]);
    void GetDesc(D3D11_QUERY_DESC * pDesc);
}

interface ID3D11Predicate: ID3D11Query {
    static immutable iidof = GUID(0x9eb576dd, 0x9f77, 0x4d86, [0x81, 0xaa, 0x8b, 0xab, 0x5f, 0xe4, 0x90, 0xe2]);
}

struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT{
  UINT64 Frequency;
  BOOL Disjoint;
}

struct D3D11_QUERY_DATA_PIPELINE_STATISTICS{
  UINT64 IAVertices;
  UINT64 IAPrimitives;
  UINT64 VSInvocations;
  UINT64 GSInvocations;
  UINT64 GSPrimitives;
  UINT64 CInvocations;
  UINT64 CPrimitives;
  UINT64 PSInvocations;
  UINT64 HSInvocations;
  UINT64 DSInvocations;
  UINT64 CSInvocations;
}

struct D3D11_QUERY_DATA_SO_STATISTICS{
  UINT64 NumPrimitivesWritten;
  UINT64 PrimitivesStorageNeeded;
}

enum D3D11_COUNTER {
    DEVICE_DEPENDENT_0 = 0x40000000,
}

enum D3D11_COUNTER_TYPE {
    FLOAT32 = 0x00000000,
    UINT16 = 0x00000001,
    UINT32 = 0x00000002,
    UINT64 = 0x00000003,
}

struct D3D11_COUNTER_DESC{
  D3D11_COUNTER Counter;
  UINT MiscFlags;
}

struct D3D11_COUNTER_INFO{
  D3D11_COUNTER LastDeviceDependentCounter;
  UINT NumSimultaneousCounters;
  UINT8 NumDetectableParallelUnits;
}

interface ID3D11Counter: ID3D11Asynchronous {
    static immutable iidof = GUID(0x6e8c49fb, 0xa371, 0x4770, [0xb4, 0x40, 0x29, 0x08, 0x60, 0x22, 0xb7, 0x41]);
    void GetDesc(D3D11_COUNTER_DESC * pDesc);
}

enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS {
    D3D11_STANDARD_MULTISAMPLE_PATTERN = -0x0000001,
    D3D11_CENTER_MULTISAMPLE_PATTERN = -0x0000002,
}

enum D3D11_DEVICE_CONTEXT_TYPE {
    D3D11_DEVICE_CONTEXT_IMMEDIATE = 0x00000000,
    D3D11_DEVICE_CONTEXT_DEFERRED = 0x00000001,
}

struct D3D11_CLASS_INSTANCE_DESC{
  UINT InstanceId;
  UINT InstanceIndex;
  UINT TypeId;
  UINT ConstantBuffer;
  UINT BaseConstantBufferOffset;
  UINT BaseTexture;
  UINT BaseSampler;
  BOOL Created;
}

interface ID3D11ClassInstance: ID3D11DeviceChild {
    static immutable iidof = GUID(0xa6cd7faa, 0xb0b7, 0x4a2f, [0x94, 0x36, 0x86, 0x62, 0xa6, 0x57, 0x97, 0xcb]);
    void GetClassLinkage(ID3D11ClassLinkage * ppLinkage);
    void GetDesc(D3D11_CLASS_INSTANCE_DESC * pDesc);
    void GetInstanceName(LPSTR pInstanceName, SIZE_T * pBufferLength);
    void GetTypeName(LPSTR pTypeName, SIZE_T * pBufferLength);
}

interface ID3D11ClassLinkage: ID3D11DeviceChild {
    static immutable iidof = GUID(0xddf57cba, 0x9543, 0x46e4, [0xa1, 0x2b, 0xf2, 0x07, 0xa0, 0xfe, 0x7f, 0xed]);
    HRESULT GetClassInstance(LPCSTR pClassInstanceName, UINT InstanceIndex, ID3D11ClassInstance * ppInstance);
    HRESULT CreateClassInstance(LPCSTR pClassTypeName, UINT ConstantBufferOffset, UINT ConstantVectorOffset, UINT TextureOffset, UINT SamplerOffset, ID3D11ClassInstance * ppInstance);
}

interface ID3D11CommandList: ID3D11DeviceChild {
    static immutable iidof = GUID(0xa24bc4d1, 0x769e, 0x43f7, [0x80, 0x13, 0x98, 0xff, 0x56, 0x6c, 0x18, 0xe2]);
    UINT GetContextFlags();
}

enum D3D11_FEATURE {
    THREADING = 0x00000000,
    DOUBLES = 0x00000001,
    FORMAT_SUPPORT = 0x00000002,
    FORMAT_SUPPORT2 = 0x00000003,
    D3D10_X_HARDWARE_OPTIONS = 0x00000004,
    D3D11_OPTIONS = 0x00000005,
    ARCHITECTURE_INFO = 0x00000006,
    D3D9_OPTIONS = 0x00000007,
    SHADER_MIN_PRECISION_SUPPORT = 0x00000008,
    D3D9_SHADOW_SUPPORT = 0x00000009,
    D3D11_OPTIONS1 = 0x0000000a,
    D3D9_SIMPLE_INSTANCING_SUPPORT = 0x0000000b,
    MARKER_SUPPORT = 0x0000000c,
    D3D9_OPTIONS1 = 0x0000000d,
    D3D11_OPTIONS2 = 0x0000000e,
    D3D11_OPTIONS3 = 0x0000000f,
    GPU_VIRTUAL_ADDRESS_SUPPORT = 0x00000010,
    D3D11_OPTIONS4 = 0x00000011,
    SHADER_CACHE = 0x00000012,
    D3D11_OPTIONS5 = 0x00000013,
}

struct D3D11_FEATURE_DATA_THREADING{
  BOOL DriverConcurrentCreates;
  BOOL DriverCommandLists;
}

struct D3D11_FEATURE_DATA_DOUBLES{
  BOOL DoublePrecisionFloatShaderOps;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT{
  DXGI_FORMAT InFormat;
  UINT OutFormatSupport;
}

struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2{
  DXGI_FORMAT InFormat;
  UINT OutFormatSupport2;
}

struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS{
  BOOL ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS{
  BOOL OutputMergerLogicOp;
  BOOL UAVOnlyRenderingForcedSampleCount;
  BOOL DiscardAPIsSeenByDriver;
  BOOL FlagsForUpdateAndCopySeenByDriver;
  BOOL ClearView;
  BOOL CopyWithOverlap;
  BOOL ConstantBufferPartialUpdate;
  BOOL ConstantBufferOffsetting;
  BOOL MapNoOverwriteOnDynamicConstantBuffer;
  BOOL MapNoOverwriteOnDynamicBufferSRV;
  BOOL MultisampleRTVWithForcedSampleCountOne;
  BOOL SAD4ShaderInstructions;
  BOOL ExtendedDoublesShaderInstructions;
  BOOL ExtendedResourceSharing;
}

struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO{
  BOOL TileBasedDeferredRenderer;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS{
  BOOL FullNonPow2TextureSupport;
}

struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT{
  BOOL SupportsDepthAsTextureWithLessEqualComparisonFilter;
}

enum D3D11_SHADER_MIN_PRECISION_SUPPORT {
    D3D11_SHADER_MIN_PRECISION_10_BIT = 0x00000001,
    D3D11_SHADER_MIN_PRECISION_16_BIT = 0x00000002,
}

struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT{
  UINT PixelShaderMinPrecision;
  UINT AllOtherShaderStagesMinPrecision;
}

enum D3D11_TILED_RESOURCES_TIER {
    D3D11_TILED_RESOURCES_NOT_SUPPORTED = 0x00000000,
    _1 = 0x00000001,
    _2 = 0x00000002,
    _3 = 0x00000003,
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS1{
  D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
  BOOL MinMaxFiltering;
  BOOL ClearViewAlsoSupportsDepthOnlyFormats;
  BOOL MapOnDefaultBuffers;
}

struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT{
  BOOL SimpleInstancingSupported;
}

struct D3D11_FEATURE_DATA_MARKER_SUPPORT{
  BOOL Profile;
}

struct D3D11_FEATURE_DATA_D3D9_OPTIONS1{
  BOOL FullNonPow2TextureSupported;
  BOOL DepthAsTextureWithLessEqualComparisonFilterSupported;
  BOOL SimpleInstancingSupported;
  BOOL TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
}

enum D3D11_CONSERVATIVE_RASTERIZATION_TIER {
    D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = 0x00000000,
    _1 = 0x00000001,
    _2 = 0x00000002,
    _3 = 0x00000003,
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS2{
  BOOL PSSpecifiedStencilRefSupported;
  BOOL TypedUAVLoadAdditionalFormats;
  BOOL ROVsSupported;
  D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
  D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
  BOOL MapOnDefaultTextures;
  BOOL StandardSwizzle;
  BOOL UnifiedMemoryArchitecture;
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS3{
  BOOL VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
}

struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT{
  UINT MaxGPUVirtualAddressBitsPerResource;
  UINT MaxGPUVirtualAddressBitsPerProcess;
}

enum D3D11_SHADER_CACHE_SUPPORT_FLAGS {
    D3D11_SHADER_CACHE_SUPPORT_NONE = 0x00000000,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = 0x00000001,
    D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = 0x00000002,
}

struct D3D11_FEATURE_DATA_SHADER_CACHE{
  UINT SupportFlags;
}

enum D3D11_SHARED_RESOURCE_TIER {
    _0 = 0x00000000,
    _1 = 0x00000001,
    _2 = 0x00000002,
}

struct D3D11_FEATURE_DATA_D3D11_OPTIONS5{
  D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
}

interface ID3D11DeviceContext: ID3D11DeviceChild {
    static immutable iidof = GUID(0xc0bfa96c, 0xe089, 0x44fb, [0x8e, 0xaf, 0x26, 0xf8, 0x79, 0x61, 0x90, 0xda]);
    void VSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void PSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void PSSetShader(ID3D11PixelShader  pPixelShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void PSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void VSSetShader(ID3D11VertexShader  pVertexShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void DrawIndexed(UINT IndexCount, UINT StartIndexLocation, INT BaseVertexLocation);
    void Draw(UINT VertexCount, UINT StartVertexLocation);
    HRESULT Map(ID3D11Resource  pResource, UINT Subresource, D3D11_MAP MapType, UINT MapFlags, D3D11_MAPPED_SUBRESOURCE * pMappedResource);
    void Unmap(ID3D11Resource  pResource, UINT Subresource);
    void PSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void IASetInputLayout(ID3D11InputLayout  pInputLayout);
    void IASetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppVertexBuffers, const UINT * pStrides, const UINT * pOffsets);
    void IASetIndexBuffer(ID3D11Buffer  pIndexBuffer, DXGI_FORMAT Format, UINT Offset);
    void DrawIndexedInstanced(UINT IndexCountPerInstance, UINT InstanceCount, UINT StartIndexLocation, INT BaseVertexLocation, UINT StartInstanceLocation);
    void DrawInstanced(UINT VertexCountPerInstance, UINT InstanceCount, UINT StartVertexLocation, UINT StartInstanceLocation);
    void GSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void GSSetShader(ID3D11GeometryShader  pShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY Topology);
    void VSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void VSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void Begin(ID3D11Asynchronous  pAsync);
    void End(ID3D11Asynchronous  pAsync);
    HRESULT GetData(ID3D11Asynchronous  pAsync, void * pData, UINT DataSize, UINT GetDataFlags);
    void SetPredication(ID3D11Predicate  pPredicate, BOOL PredicateValue);
    void GSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void GSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void OMSetRenderTargets(UINT NumViews, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView  pDepthStencilView);
    void OMSetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView  pDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews, const UINT * pUAVInitialCounts);
    void OMSetBlendState(ID3D11BlendState  pBlendState, const FLOAT [4] BlendFactor, UINT SampleMask);
    void OMSetDepthStencilState(ID3D11DepthStencilState  pDepthStencilState, UINT StencilRef);
    void SOSetTargets(UINT NumBuffers, ID3D11Buffer * ppSOTargets, const UINT * pOffsets);
    void DrawAuto();
    void DrawIndexedInstancedIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void DrawInstancedIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void Dispatch(UINT ThreadGroupCountX, UINT ThreadGroupCountY, UINT ThreadGroupCountZ);
    void DispatchIndirect(ID3D11Buffer  pBufferForArgs, UINT AlignedByteOffsetForArgs);
    void RSSetState(ID3D11RasterizerState  pRasterizerState);
    void RSSetViewports(UINT NumViewports, const D3D11_VIEWPORT * pViewports);
    void RSSetScissorRects(UINT NumRects, const D3D11_RECT * pRects);
    void CopySubresourceRegion(ID3D11Resource  pDstResource, UINT DstSubresource, UINT DstX, UINT DstY, UINT DstZ, ID3D11Resource  pSrcResource, UINT SrcSubresource, const D3D11_BOX * pSrcBox);
    void CopyResource(ID3D11Resource  pDstResource, ID3D11Resource  pSrcResource);
    void UpdateSubresource(ID3D11Resource  pDstResource, UINT DstSubresource, const D3D11_BOX * pDstBox, const void * pSrcData, UINT SrcRowPitch, UINT SrcDepthPitch);
    void CopyStructureCount(ID3D11Buffer  pDstBuffer, UINT DstAlignedByteOffset, ID3D11UnorderedAccessView  pSrcView);
    void ClearRenderTargetView(ID3D11RenderTargetView  pRenderTargetView, const FLOAT [4] ColorRGBA);
    void ClearUnorderedAccessViewUint(ID3D11UnorderedAccessView  pUnorderedAccessView, const UINT [4] Values);
    void ClearUnorderedAccessViewFloat(ID3D11UnorderedAccessView  pUnorderedAccessView, const FLOAT [4] Values);
    void ClearDepthStencilView(ID3D11DepthStencilView  pDepthStencilView, UINT ClearFlags, FLOAT Depth, UINT8 Stencil);
    void GenerateMips(ID3D11ShaderResourceView  pShaderResourceView);
    void SetResourceMinLOD(ID3D11Resource  pResource, FLOAT MinLOD);
    FLOAT GetResourceMinLOD(ID3D11Resource  pResource);
    void ResolveSubresource(ID3D11Resource  pDstResource, UINT DstSubresource, ID3D11Resource  pSrcResource, UINT SrcSubresource, DXGI_FORMAT Format);
    void ExecuteCommandList(ID3D11CommandList  pCommandList, BOOL RestoreContextState);
    void HSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void HSSetShader(ID3D11HullShader  pHullShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void HSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void HSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void DSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void DSSetShader(ID3D11DomainShader  pDomainShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void DSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void DSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void CSSetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void CSSetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews, const UINT * pUAVInitialCounts);
    void CSSetShader(ID3D11ComputeShader  pComputeShader, ID3D11ClassInstance * ppClassInstances, UINT NumClassInstances);
    void CSSetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void CSSetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void VSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void PSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void PSGetShader(ID3D11PixelShader * ppPixelShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void PSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void VSGetShader(ID3D11VertexShader * ppVertexShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void PSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void IAGetInputLayout(ID3D11InputLayout * ppInputLayout);
    void IAGetVertexBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppVertexBuffers, UINT * pStrides, UINT * pOffsets);
    void IAGetIndexBuffer(ID3D11Buffer * pIndexBuffer, DXGI_FORMAT * Format, UINT * Offset);
    void GSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void GSGetShader(ID3D11GeometryShader * ppGeometryShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void IAGetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY * pTopology);
    void VSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void VSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void GetPredication(ID3D11Predicate * ppPredicate, BOOL * pPredicateValue);
    void GSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void GSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void OMGetRenderTargets(UINT NumViews, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView * ppDepthStencilView);
    void OMGetRenderTargetsAndUnorderedAccessViews(UINT NumRTVs, ID3D11RenderTargetView * ppRenderTargetViews, ID3D11DepthStencilView * ppDepthStencilView, UINT UAVStartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews);
    void OMGetBlendState(ID3D11BlendState * ppBlendState, FLOAT [4] BlendFactor, UINT * pSampleMask);
    void OMGetDepthStencilState(ID3D11DepthStencilState * ppDepthStencilState, UINT * pStencilRef);
    void SOGetTargets(UINT NumBuffers, ID3D11Buffer * ppSOTargets);
    void RSGetState(ID3D11RasterizerState * ppRasterizerState);
    void RSGetViewports(UINT * pNumViewports, D3D11_VIEWPORT * pViewports);
    void RSGetScissorRects(UINT * pNumRects, D3D11_RECT * pRects);
    void HSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void HSGetShader(ID3D11HullShader * ppHullShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void HSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void HSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void DSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void DSGetShader(ID3D11DomainShader * ppDomainShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void DSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void DSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void CSGetShaderResources(UINT StartSlot, UINT NumViews, ID3D11ShaderResourceView * ppShaderResourceViews);
    void CSGetUnorderedAccessViews(UINT StartSlot, UINT NumUAVs, ID3D11UnorderedAccessView * ppUnorderedAccessViews);
    void CSGetShader(ID3D11ComputeShader * ppComputeShader, ID3D11ClassInstance * ppClassInstances, UINT * pNumClassInstances);
    void CSGetSamplers(UINT StartSlot, UINT NumSamplers, ID3D11SamplerState * ppSamplers);
    void CSGetConstantBuffers(UINT StartSlot, UINT NumBuffers, ID3D11Buffer * ppConstantBuffers);
    void ClearState();
    void Flush();
    D3D11_DEVICE_CONTEXT_TYPE GetType();
    UINT GetContextFlags();
    HRESULT FinishCommandList(BOOL RestoreDeferredContextState, ID3D11CommandList * ppCommandList);
}

alias APP_DEPRECATED_HRESULT = HRESULT;

struct D3D11_VIDEO_DECODER_DESC{
  GUID Guid;
  UINT SampleWidth;
  UINT SampleHeight;
  DXGI_FORMAT OutputFormat;
}

struct D3D11_VIDEO_DECODER_CONFIG{
  GUID guidConfigBitstreamEncryption;
  GUID guidConfigMBcontrolEncryption;
  GUID guidConfigResidDiffEncryption;
  UINT ConfigBitstreamRaw;
  UINT ConfigMBcontrolRasterOrder;
  UINT ConfigResidDiffHost;
  UINT ConfigSpatialResid8;
  UINT ConfigResid8Subtraction;
  UINT ConfigSpatialHost8or9Clipping;
  UINT ConfigSpatialResidInterleaved;
  UINT ConfigIntraResidUnsigned;
  UINT ConfigResidDiffAccelerator;
  UINT ConfigHostInverseScan;
  UINT ConfigSpecificIDCT;
  UINT Config4GroupedCoefs;
  USHORT ConfigMinRenderTargetBuffCount;
  USHORT ConfigDecoderSpecific;
}

enum D3D11_VIDEO_DECODER_BUFFER_TYPE {
    D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = 0x00000000,
    D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = 0x00000001,
    D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = 0x00000002,
    D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = 0x00000003,
    D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = 0x00000004,
    D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = 0x00000005,
    D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = 0x00000006,
    D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = 0x00000007,
    D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = 0x00000008,
}

struct _D3D11_AES_CTR_IV{
  UINT64 IV;
  UINT64 Count;
}

alias D3D11_AES_CTR_IV = _D3D11_AES_CTR_IV;

struct D3D11_ENCRYPTED_BLOCK_INFO{
  UINT NumEncryptedBytesAtBeginning;
  UINT NumBytesInSkipPattern;
  UINT NumBytesInEncryptPattern;
}

struct D3D11_VIDEO_DECODER_BUFFER_DESC{
  D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
  UINT BufferIndex;
  UINT DataOffset;
  UINT DataSize;
  UINT FirstMBaddress;
  UINT NumMBsInBuffer;
  UINT Width;
  UINT Height;
  UINT Stride;
  UINT ReservedBits;
  void * pIV;
  UINT IVSize;
  BOOL PartialEncryption;
  D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
}

struct D3D11_VIDEO_DECODER_EXTENSION{
  UINT Function;
  void * pPrivateInputData;
  UINT PrivateInputDataSize;
  void * pPrivateOutputData;
  UINT PrivateOutputDataSize;
  UINT ResourceCount;
  ID3D11Resource ** ppResourceList;
}

interface ID3D11VideoDecoder: ID3D11DeviceChild {
    static immutable iidof = GUID(0x3c9c5b51, 0x995d, 0x48d1, [0x9b, 0x8d, 0xfa, 0x5c, 0xae, 0xde, 0xd6, 0x5c]);
    HRESULT GetCreationParameters(D3D11_VIDEO_DECODER_DESC * pVideoDesc, D3D11_VIDEO_DECODER_CONFIG * pConfig);
    HRESULT GetDriverHandle(HANDLE * pDriverHandle);
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT {
    INPUT = 0x00000001,
    OUTPUT = 0x00000002,
}

enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS {
    LINEAR_SPACE = 0x00000001,
    xvYCC = 0x00000002,
    RGB_RANGE_CONVERSION = 0x00000004,
    YCbCr_MATRIX_CONVERSION = 0x00000008,
    NOMINAL_RANGE = 0x00000010,
}

enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS {
    ALPHA_FILL = 0x00000001,
    CONSTRICTION = 0x00000002,
    LUMA_KEY = 0x00000004,
    ALPHA_PALETTE = 0x00000008,
    LEGACY = 0x00000010,
    STEREO = 0x00000020,
    ROTATION = 0x00000040,
    ALPHA_STREAM = 0x00000080,
    PIXEL_ASPECT_RATIO = 0x00000100,
    MIRROR = 0x00000200,
    SHADER_USAGE = 0x00000400,
    METADATA_HDR10 = 0x00000800,
}

enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS {
    BRIGHTNESS = 0x00000001,
    CONTRAST = 0x00000002,
    HUE = 0x00000004,
    SATURATION = 0x00000008,
    NOISE_REDUCTION = 0x00000010,
    EDGE_ENHANCEMENT = 0x00000020,
    ANAMORPHIC_SCALING = 0x00000040,
    STEREO_ADJUSTMENT = 0x00000080,
}

enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS {
    RGB_INTERLACED = 0x00000001,
    RGB_PROCAMP = 0x00000002,
    RGB_LUMA_KEY = 0x00000004,
    PALETTE_INTERLACED = 0x00000008,
}

enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS {
    DENOISE = 0x00000001,
    DERINGING = 0x00000002,
    EDGE_ENHANCEMENT = 0x00000004,
    COLOR_CORRECTION = 0x00000008,
    FLESH_TONE_MAPPING = 0x00000010,
    IMAGE_STABILIZATION = 0x00000020,
    SUPER_RESOLUTION = 0x00000040,
    ANAMORPHIC_SCALING = 0x00000080,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS {
    MONO_OFFSET = 0x00000001,
    ROW_INTERLEAVED = 0x00000002,
    COLUMN_INTERLEAVED = 0x00000004,
    CHECKERBOARD = 0x00000008,
    FLIP_MODE = 0x00000010,
}

struct D3D11_VIDEO_PROCESSOR_CAPS{
  UINT DeviceCaps;
  UINT FeatureCaps;
  UINT FilterCaps;
  UINT InputFormatCaps;
  UINT AutoStreamCaps;
  UINT StereoCaps;
  UINT RateConversionCapsCount;
  UINT MaxInputStreams;
  UINT MaxStreamStates;
}

enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS {
    DEINTERLACE_BLEND = 0x00000001,
    DEINTERLACE_BOB = 0x00000002,
    DEINTERLACE_ADAPTIVE = 0x00000004,
    DEINTERLACE_MOTION_COMPENSATION = 0x00000008,
    INVERSE_TELECINE = 0x00000010,
    FRAME_RATE_CONVERSION = 0x00000020,
}

enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS {
    _32 = 0x00000001,
    _22 = 0x00000002,
    _2224 = 0x00000004,
    _2332 = 0x00000008,
    _32322 = 0x00000010,
    _55 = 0x00000020,
    _64 = 0x00000040,
    _87 = 0x00000080,
    _222222222223 = 0x00000100,
    OTHER = -0x80000000,
}

struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS{
  UINT PastFrames;
  UINT FutureFrames;
  UINT ProcessorCaps;
  UINT ITelecineCaps;
  UINT CustomRateCount;
}

enum D3D11_CONTENT_PROTECTION_CAPS {
    SOFTWARE = 0x00000001,
    HARDWARE = 0x00000002,
    PROTECTION_ALWAYS_ON = 0x00000004,
    PARTIAL_DECRYPTION = 0x00000008,
    CONTENT_KEY = 0x00000010,
    FRESHEN_SESSION_KEY = 0x00000020,
    ENCRYPTED_READ_BACK = 0x00000040,
    ENCRYPTED_READ_BACK_KEY = 0x00000080,
    SEQUENTIAL_CTR_IV = 0x00000100,
    ENCRYPT_SLICEDATA_ONLY = 0x00000200,
    DECRYPTION_BLT = 0x00000400,
    HARDWARE_PROTECT_UNCOMPRESSED = 0x00000800,
    HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x00001000,
    HARDWARE_TEARDOWN = 0x00002000,
    HARDWARE_DRM_COMMUNICATION = 0x00004000,
    HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 0x00008000,
}

struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS{
  UINT Caps;
  UINT KeyExchangeTypeCount;
  UINT BlockAlignmentSize;
  ULONGLONG ProtectedMemorySize;
}

struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE{
  DXGI_RATIONAL CustomRate;
  UINT OutputFrames;
  BOOL InputInterlaced;
  UINT InputFramesOrFields;
}

enum D3D11_VIDEO_PROCESSOR_FILTER {
    BRIGHTNESS = 0x00000000,
    CONTRAST = 0x00000001,
    HUE = 0x00000002,
    SATURATION = 0x00000003,
    NOISE_REDUCTION = 0x00000004,
    EDGE_ENHANCEMENT = 0x00000005,
    ANAMORPHIC_SCALING = 0x00000006,
    STEREO_ADJUSTMENT = 0x00000007,
}

struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE{
  int Minimum;
  int Maximum;
  int Default;
  float Multiplier;
}

enum D3D11_VIDEO_FRAME_FORMAT {
    PROGRESSIVE = 0x00000000,
    INTERLACED_TOP_FIELD_FIRST = 0x00000001,
    INTERLACED_BOTTOM_FIELD_FIRST = 0x00000002,
}

enum D3D11_VIDEO_USAGE {
    PLAYBACK_NORMAL = 0x00000000,
    OPTIMAL_SPEED = 0x00000001,
    OPTIMAL_QUALITY = 0x00000002,
}

struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC{
  D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
  DXGI_RATIONAL InputFrameRate;
  UINT InputWidth;
  UINT InputHeight;
  DXGI_RATIONAL OutputFrameRate;
  UINT OutputWidth;
  UINT OutputHeight;
  D3D11_VIDEO_USAGE Usage;
}

interface ID3D11VideoProcessorEnumerator: ID3D11DeviceChild {
    static immutable iidof = GUID(0x31627037, 0x53ab, 0x4200, [0x90, 0x61, 0x05, 0xfa, 0xa9, 0xab, 0x45, 0xf9]);
    HRESULT GetVideoProcessorContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pContentDesc);
    HRESULT CheckVideoProcessorFormat(DXGI_FORMAT Format, UINT * pFlags);
    HRESULT GetVideoProcessorCaps(D3D11_VIDEO_PROCESSOR_CAPS * pCaps);
    HRESULT GetVideoProcessorRateConversionCaps(UINT TypeIndex, D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps);
    HRESULT GetVideoProcessorCustomRate(UINT TypeIndex, UINT CustomRateIndex, D3D11_VIDEO_PROCESSOR_CUSTOM_RATE * pRate);
    HRESULT GetVideoProcessorFilterRange(D3D11_VIDEO_PROCESSOR_FILTER Filter, D3D11_VIDEO_PROCESSOR_FILTER_RANGE * pRange);
}

struct D3D11_VIDEO_COLOR_RGBA{
  float R;
  float G;
  float B;
  float A;
}

struct D3D11_VIDEO_COLOR_YCbCrA{
  float Y;
  float Cb;
  float Cr;
  float A;
}

struct D3D11_VIDEO_COLOR{
  union {
    D3D11_VIDEO_COLOR_YCbCrA YCbCr;
    D3D11_VIDEO_COLOR_RGBA RGBA;
  }
}

enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE {
    UNDEFINED = 0x00000000,
    _16_235 = 0x00000001,
    _0_255 = 0x00000002,
}

struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE{
  UINT Usage;
  UINT RGB_Range;
  UINT YCbCr_Matrix;
  UINT YCbCr_xvYCC;
  UINT Nominal_Range;
  UINT Reserved;
}

enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE {
    OPAQUE = 0x00000000,
    BACKGROUND = 0x00000001,
    DESTINATION = 0x00000002,
    SOURCE_STREAM = 0x00000003,
}

enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE {
    NORMAL = 0x00000000,
    HALF = 0x00000001,
    CUSTOM = 0x00000002,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT {
    MONO = 0x00000000,
    HORIZONTAL = 0x00000001,
    VERTICAL = 0x00000002,
    SEPARATE = 0x00000003,
    MONO_OFFSET = 0x00000004,
    ROW_INTERLEAVED = 0x00000005,
    COLUMN_INTERLEAVED = 0x00000006,
    CHECKERBOARD = 0x00000007,
}

enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE {
    NONE = 0x00000000,
    FRAME0 = 0x00000001,
    FRAME1 = 0x00000002,
}

enum D3D11_VIDEO_PROCESSOR_ROTATION {
    IDENTITY = 0x00000000,
    _90 = 0x00000001,
    _180 = 0x00000002,
    _270 = 0x00000003,
}

struct D3D11_VIDEO_PROCESSOR_STREAM{
  BOOL Enable;
  UINT OutputIndex;
  UINT InputFrameOrField;
  UINT PastFrames;
  UINT FutureFrames;
  ID3D11VideoProcessorInputView ** ppPastSurfaces;
  ID3D11VideoProcessorInputView * pInputSurface;
  ID3D11VideoProcessorInputView ** ppFutureSurfaces;
  ID3D11VideoProcessorInputView ** ppPastSurfacesRight;
  ID3D11VideoProcessorInputView * pInputSurfaceRight;
  ID3D11VideoProcessorInputView ** ppFutureSurfacesRight;
}

interface ID3D11VideoProcessor: ID3D11DeviceChild {
    static immutable iidof = GUID(0x1d7b0652, 0x185f, 0x41c6, [0x85, 0xce, 0x0c, 0x5b, 0xe3, 0xd4, 0xae, 0x6c]);
    void GetContentDesc(D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc);
    void GetRateConversionCaps(D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS * pCaps);
}

struct D3D11_OMAC{
  BYTE [16] Omac;
}

enum D3D11_AUTHENTICATED_CHANNEL_TYPE {
    D3D11_AUTHENTICATED_CHANNEL_D3D11 = 0x00000001,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = 0x00000002,
    D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = 0x00000003,
}

interface ID3D11AuthenticatedChannel: ID3D11DeviceChild {
    static immutable iidof = GUID(0x3015a308, 0xdcbd, 0x47aa, [0xa7, 0x47, 0x19, 0x24, 0x86, 0xd1, 0x4d, 0x4a]);
    HRESULT GetCertificateSize(UINT * pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE * pCertificate);
    void GetChannelHandle(HANDLE * pChannelHandle);
}

struct D3D11_AUTHENTICATED_QUERY_INPUT{
  GUID QueryType;
  HANDLE hChannel;
  UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT{
  D3D11_OMAC omac;
  GUID QueryType;
  HANDLE hChannel;
  UINT SequenceNumber;
  HRESULT ReturnCode;
}

union D3D11_AUTHENTICATED_PROTECTION_FLAGS{
  struct __MIDL___MIDL_itf_d3d11_0000_0034_0001{
    UINT ProtectionEnabled;
    UINT OverlayOrFullscreenRequired;
    UINT Reserved;
  }
  __MIDL___MIDL_itf_d3d11_0000_0034_0001 Flags;
  UINT Value;
}

struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
}

struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
}

struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DecoderHandle;
}

struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DecoderHandle;
  HANDLE CryptoSessionHandle;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT RestrictedSharedResourceProcessCount;
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  UINT ProcessIndex;
}

enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE {
    D3D11_PROCESSIDTYPE_UNKNOWN = 0x00000000,
    D3D11_PROCESSIDTYPE_DWM = 0x00000001,
    D3D11_PROCESSIDTYPE_HANDLE = 0x00000002,
}

struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT ProcessIndex;
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
  HANDLE ProcessHandle;
}

struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT UnrestrictedProtectedSharedResourceCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDCount;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDIndex;
}

struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  HANDLE DeviceHandle;
  HANDLE CryptoSessionHandle;
  UINT OutputIDIndex;
  UINT64 OutputID;
}

enum D3D11_BUS_TYPE {
    OTHER = 0x00000000,
    PCI = 0x00000001,
    PCIX = 0x00000002,
    PCIEXPRESS = 0x00000003,
    AGP = 0x00000004,
    D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x00010000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x00020000,
    D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x00030000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x00040000,
    D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x00050000,
    D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = -0x80000000,
}

struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  D3D11_BUS_TYPE BusType;
  BOOL AccessibleInContiguousBlocks;
  BOOL AccessibleInNonContiguousBlocks;
}

alias D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT;

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT EncryptionGuidCount;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT{
  D3D11_AUTHENTICATED_QUERY_INPUT Input;
  UINT EncryptionGuidIndex;
}

struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  UINT EncryptionGuidIndex;
  GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT{
  D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
  GUID EncryptionGuid;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INPUT{
  D3D11_OMAC omac;
  GUID ConfigureType;
  HANDLE hChannel;
  UINT SequenceNumber;
}

struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT{
  D3D11_OMAC omac;
  GUID ConfigureType;
  HANDLE hChannel;
  UINT SequenceNumber;
  HRESULT ReturnCode;
}

struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  UINT StartSequenceQuery;
  UINT StartSequenceConfigure;
}

struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
}

struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  HANDLE DecoderHandle;
  HANDLE CryptoSessionHandle;
  HANDLE DeviceHandle;
}

struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
  HANDLE ProcessHandle;
  BOOL AllowAccess;
}

struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT{
  D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
  GUID EncryptionGuid;
}

interface ID3D11CryptoSession: ID3D11DeviceChild {
    static immutable iidof = GUID(0x9b32f9ad, 0xbdcc, 0x40a6, [0xa3, 0x9d, 0xd5, 0xc8, 0x65, 0x84, 0x57, 0x20]);
    void GetCryptoType(GUID * pCryptoType);
    void GetDecoderProfile(GUID * pDecoderProfile);
    HRESULT GetCertificateSize(UINT * pCertificateSize);
    HRESULT GetCertificate(UINT CertificateSize, BYTE * pCertificate);
    void GetCryptoSessionHandle(HANDLE * pCryptoSessionHandle);
}

enum D3D11_VDOV_DIMENSION {
    UNKNOWN = 0x00000000,
    TEXTURE2D = 0x00000001,
}

struct D3D11_TEX2D_VDOV{
  UINT ArraySlice;
}

struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC{
  GUID DecodeProfile;
  D3D11_VDOV_DIMENSION ViewDimension;
  union {
    D3D11_TEX2D_VDOV Texture2D;
  }
}

interface ID3D11VideoDecoderOutputView: ID3D11View {
    static immutable iidof = GUID(0xc2931aea, 0x2a85, 0x4f20, [0x86, 0x0f, 0xfb, 0xa1, 0xfd, 0x25, 0x6e, 0x18]);
    void GetDesc(D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc);
}

enum D3D11_VPIV_DIMENSION {
    UNKNOWN = 0x00000000,
    TEXTURE2D = 0x00000001,
}

struct D3D11_TEX2D_VPIV{
  UINT MipSlice;
  UINT ArraySlice;
}

struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC{
  UINT FourCC;
  D3D11_VPIV_DIMENSION ViewDimension;
  union {
    D3D11_TEX2D_VPIV Texture2D;
  }
}

interface ID3D11VideoProcessorInputView: ID3D11View {
    static immutable iidof = GUID(0x11ec5a5f, 0x51dc, 0x4945, [0xab, 0x34, 0x6e, 0x8c, 0x21, 0x30, 0x0e, 0xa5]);
    void GetDesc(D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc);
}

enum D3D11_VPOV_DIMENSION {
    UNKNOWN = 0x00000000,
    TEXTURE2D = 0x00000001,
    TEXTURE2DARRAY = 0x00000002,
}

struct D3D11_TEX2D_VPOV{
  UINT MipSlice;
}

struct D3D11_TEX2D_ARRAY_VPOV{
  UINT MipSlice;
  UINT FirstArraySlice;
  UINT ArraySize;
}

struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC{
  D3D11_VPOV_DIMENSION ViewDimension;
  union {
    D3D11_TEX2D_VPOV Texture2D;
    D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
  }
}

interface ID3D11VideoProcessorOutputView: ID3D11View {
    static immutable iidof = GUID(0xa048285e, 0x25a9, 0x4527, [0xbd, 0x93, 0xd6, 0x8b, 0x68, 0xc4, 0x42, 0x54]);
    void GetDesc(D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc);
}

interface ID3D11VideoContext: ID3D11DeviceChild {
    static immutable iidof = GUID(0x61f21c45, 0x3c0e, 0x4a74, [0x9c, 0xea, 0x67, 0x10, 0x0d, 0x9a, 0xd5, 0xe4]);
    HRESULT GetDecoderBuffer(ID3D11VideoDecoder  pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, UINT * pBufferSize, void ** ppBuffer);
    HRESULT ReleaseDecoderBuffer(ID3D11VideoDecoder  pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);
    HRESULT DecoderBeginFrame(ID3D11VideoDecoder  pDecoder, ID3D11VideoDecoderOutputView  pView, UINT ContentKeySize, const void * pContentKey);
    HRESULT DecoderEndFrame(ID3D11VideoDecoder  pDecoder);
    HRESULT SubmitDecoderBuffers(ID3D11VideoDecoder  pDecoder, UINT NumBuffers, const D3D11_VIDEO_DECODER_BUFFER_DESC * pBufferDesc);
    APP_DEPRECATED_HRESULT DecoderExtension(ID3D11VideoDecoder  pDecoder, const D3D11_VIDEO_DECODER_EXTENSION * pExtensionData);
    void VideoProcessorSetOutputTargetRect(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetOutputBackgroundColor(ID3D11VideoProcessor  pVideoProcessor, BOOL YCbCr, const D3D11_VIDEO_COLOR * pColor);
    void VideoProcessorSetOutputColorSpace(ID3D11VideoProcessor  pVideoProcessor, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorSetOutputAlphaFillMode(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, UINT StreamIndex);
    void VideoProcessorSetOutputConstriction(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable, SIZE Size);
    void VideoProcessorSetOutputStereoMode(ID3D11VideoProcessor  pVideoProcessor, BOOL Enable);
    APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtension(ID3D11VideoProcessor  pVideoProcessor, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorGetOutputTargetRect(ID3D11VideoProcessor  pVideoProcessor, BOOL * Enabled, RECT * pRect);
    void VideoProcessorGetOutputBackgroundColor(ID3D11VideoProcessor  pVideoProcessor, BOOL * pYCbCr, D3D11_VIDEO_COLOR * pColor);
    void VideoProcessorGetOutputColorSpace(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorGetOutputAlphaFillMode(ID3D11VideoProcessor  pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE * pAlphaFillMode, UINT * pStreamIndex);
    void VideoProcessorGetOutputConstriction(ID3D11VideoProcessor  pVideoProcessor, BOOL * pEnabled, SIZE * pSize);
    void VideoProcessorGetOutputStereoMode(ID3D11VideoProcessor  pVideoProcessor, BOOL * pEnabled);
    APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtension(ID3D11VideoProcessor  pVideoProcessor, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorSetStreamFrameFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);
    void VideoProcessorSetStreamColorSpace(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorSetStreamOutputRate(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, BOOL RepeatFrame, const DXGI_RATIONAL * pCustomRate);
    void VideoProcessorSetStreamSourceRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetStreamDestRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const RECT * pRect);
    void VideoProcessorSetStreamAlpha(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Alpha);
    void VideoProcessorSetStreamPalette(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, UINT Count, const UINT * pEntries);
    void VideoProcessorSetStreamPixelAspectRatio(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, const DXGI_RATIONAL * pSourceAspectRatio, const DXGI_RATIONAL * pDestinationAspectRatio);
    void VideoProcessorSetStreamLumaKey(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, FLOAT Lower, FLOAT Upper);
    void VideoProcessorSetStreamStereoFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, BOOL LeftViewFrame0, BOOL BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);
    void VideoProcessorSetStreamAutoProcessingMode(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable);
    void VideoProcessorSetStreamFilter(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL Enable, int Level);
    APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtension(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    void VideoProcessorGetStreamFrameFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_FRAME_FORMAT * pFrameFormat);
    void VideoProcessorGetStreamColorSpace(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_COLOR_SPACE * pColorSpace);
    void VideoProcessorGetStreamOutputRate(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE * pOutputRate, BOOL * pRepeatFrame, DXGI_RATIONAL * pCustomRate);
    void VideoProcessorGetStreamSourceRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, RECT * pRect);
    void VideoProcessorGetStreamDestRect(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, RECT * pRect);
    void VideoProcessorGetStreamAlpha(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, FLOAT * pAlpha);
    void VideoProcessorGetStreamPalette(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, UINT Count, UINT * pEntries);
    void VideoProcessorGetStreamPixelAspectRatio(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, DXGI_RATIONAL * pSourceAspectRatio, DXGI_RATIONAL * pDestinationAspectRatio);
    void VideoProcessorGetStreamLumaKey(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled, FLOAT * pLower, FLOAT * pUpper);
    void VideoProcessorGetStreamStereoFormat(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT * pFormat, BOOL * pLeftViewFrame0, BOOL * pBaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE * pFlipMode, int * MonoOffset);
    void VideoProcessorGetStreamAutoProcessingMode(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnabled);
    void VideoProcessorGetStreamFilter(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, BOOL * pEnabled, int * pLevel);
    APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtension(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, const GUID * pExtensionGuid, UINT DataSize, void * pData);
    HRESULT VideoProcessorBlt(ID3D11VideoProcessor  pVideoProcessor, ID3D11VideoProcessorOutputView  pView, UINT OutputFrame, UINT StreamCount, const D3D11_VIDEO_PROCESSOR_STREAM * pStreams);
    HRESULT NegotiateCryptoSessionKeyExchange(ID3D11CryptoSession  pCryptoSession, UINT DataSize, void * pData);
    void EncryptionBlt(ID3D11CryptoSession  pCryptoSession, ID3D11Texture2D  pSrcSurface, ID3D11Texture2D  pDstSurface, UINT IVSize, void * pIV);
    void DecryptionBlt(ID3D11CryptoSession  pCryptoSession, ID3D11Texture2D  pSrcSurface, ID3D11Texture2D  pDstSurface, D3D11_ENCRYPTED_BLOCK_INFO * pEncryptedBlockInfo, UINT ContentKeySize, const void * pContentKey, UINT IVSize, void * pIV);
    void StartSessionKeyRefresh(ID3D11CryptoSession  pCryptoSession, UINT RandomNumberSize, void * pRandomNumber);
    void FinishSessionKeyRefresh(ID3D11CryptoSession  pCryptoSession);
    HRESULT GetEncryptionBltKey(ID3D11CryptoSession  pCryptoSession, UINT KeySize, void * pReadbackKey);
    HRESULT NegotiateAuthenticatedChannelKeyExchange(ID3D11AuthenticatedChannel  pChannel, UINT DataSize, void * pData);
    HRESULT QueryAuthenticatedChannel(ID3D11AuthenticatedChannel  pChannel, UINT InputSize, const void * pInput, UINT OutputSize, void * pOutput);
    HRESULT ConfigureAuthenticatedChannel(ID3D11AuthenticatedChannel  pChannel, UINT InputSize, const void * pInput, D3D11_AUTHENTICATED_CONFIGURE_OUTPUT * pOutput);
    void VideoProcessorSetStreamRotation(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);
    void VideoProcessorGetStreamRotation(ID3D11VideoProcessor  pVideoProcessor, UINT StreamIndex, BOOL * pEnable, D3D11_VIDEO_PROCESSOR_ROTATION * pRotation);
}

interface ID3D11VideoDevice: IUnknown {
    static immutable iidof = GUID(0x10ec4d5b, 0x975a, 0x4689, [0xb9, 0xe4, 0xd0, 0xaa, 0xc3, 0x0f, 0xe3, 0x33]);
    HRESULT CreateVideoDecoder(const D3D11_VIDEO_DECODER_DESC * pVideoDesc, const D3D11_VIDEO_DECODER_CONFIG * pConfig, ID3D11VideoDecoder * ppDecoder);
    HRESULT CreateVideoProcessor(ID3D11VideoProcessorEnumerator  pEnum, UINT RateConversionIndex, ID3D11VideoProcessor * ppVideoProcessor);
    HRESULT CreateAuthenticatedChannel(D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ID3D11AuthenticatedChannel * ppAuthenticatedChannel);
    HRESULT CreateCryptoSession(const GUID * pCryptoType, const GUID * pDecoderProfile, const GUID * pKeyExchangeType, ID3D11CryptoSession * ppCryptoSession);
    HRESULT CreateVideoDecoderOutputView(ID3D11Resource  pResource, const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC * pDesc, ID3D11VideoDecoderOutputView * ppVDOVView);
    HRESULT CreateVideoProcessorInputView(ID3D11Resource  pResource, ID3D11VideoProcessorEnumerator  pEnum, const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC * pDesc, ID3D11VideoProcessorInputView * ppVPIView);
    HRESULT CreateVideoProcessorOutputView(ID3D11Resource  pResource, ID3D11VideoProcessorEnumerator  pEnum, const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC * pDesc, ID3D11VideoProcessorOutputView * ppVPOView);
    HRESULT CreateVideoProcessorEnumerator(const D3D11_VIDEO_PROCESSOR_CONTENT_DESC * pDesc, ID3D11VideoProcessorEnumerator * ppEnum);
    UINT GetVideoDecoderProfileCount();
    HRESULT GetVideoDecoderProfile(UINT Index, GUID * pDecoderProfile);
    HRESULT CheckVideoDecoderFormat(const GUID * pDecoderProfile, DXGI_FORMAT Format, BOOL * pSupported);
    HRESULT GetVideoDecoderConfigCount(const D3D11_VIDEO_DECODER_DESC * pDesc, UINT * pCount);
    HRESULT GetVideoDecoderConfig(const D3D11_VIDEO_DECODER_DESC * pDesc, UINT Index, D3D11_VIDEO_DECODER_CONFIG * pConfig);
    HRESULT GetContentProtectionCaps(const GUID * pCryptoType, const GUID * pDecoderProfile, D3D11_VIDEO_CONTENT_PROTECTION_CAPS * pCaps);
    HRESULT CheckCryptoKeyExchange(const GUID * pCryptoType, const GUID * pDecoderProfile, UINT Index, GUID * pKeyExchangeType);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
}

interface ID3D11Device: IUnknown {
    static immutable iidof = GUID(0xdb6f6ddb, 0xac77, 0x4e88, [0x82, 0x53, 0x81, 0x9d, 0xf9, 0xbb, 0xf1, 0x40]);
    HRESULT CreateBuffer(const D3D11_BUFFER_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Buffer * ppBuffer);
    HRESULT CreateTexture1D(const D3D11_TEXTURE1D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture1D * ppTexture1D);
    HRESULT CreateTexture2D(const D3D11_TEXTURE2D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture2D * ppTexture2D);
    HRESULT CreateTexture3D(const D3D11_TEXTURE3D_DESC * pDesc, const D3D11_SUBRESOURCE_DATA * pInitialData, ID3D11Texture3D * ppTexture3D);
    HRESULT CreateShaderResourceView(ID3D11Resource  pResource, const D3D11_SHADER_RESOURCE_VIEW_DESC * pDesc, ID3D11ShaderResourceView * ppSRView);
    HRESULT CreateUnorderedAccessView(ID3D11Resource  pResource, const D3D11_UNORDERED_ACCESS_VIEW_DESC * pDesc, ID3D11UnorderedAccessView * ppUAView);
    HRESULT CreateRenderTargetView(ID3D11Resource  pResource, const D3D11_RENDER_TARGET_VIEW_DESC * pDesc, ID3D11RenderTargetView * ppRTView);
    HRESULT CreateDepthStencilView(ID3D11Resource  pResource, const D3D11_DEPTH_STENCIL_VIEW_DESC * pDesc, ID3D11DepthStencilView * ppDepthStencilView);
    HRESULT CreateInputLayout(const D3D11_INPUT_ELEMENT_DESC * pInputElementDescs, UINT NumElements, const void * pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ID3D11InputLayout * ppInputLayout);
    HRESULT CreateVertexShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11VertexShader * ppVertexShader);
    HRESULT CreateGeometryShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11GeometryShader * ppGeometryShader);
    HRESULT CreateGeometryShaderWithStreamOutput(const void * pShaderBytecode, SIZE_T BytecodeLength, const D3D11_SO_DECLARATION_ENTRY * pSODeclaration, UINT NumEntries, const UINT * pBufferStrides, UINT NumStrides, UINT RasterizedStream, ID3D11ClassLinkage  pClassLinkage, ID3D11GeometryShader * ppGeometryShader);
    HRESULT CreatePixelShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11PixelShader * ppPixelShader);
    HRESULT CreateHullShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11HullShader * ppHullShader);
    HRESULT CreateDomainShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11DomainShader * ppDomainShader);
    HRESULT CreateComputeShader(const void * pShaderBytecode, SIZE_T BytecodeLength, ID3D11ClassLinkage  pClassLinkage, ID3D11ComputeShader * ppComputeShader);
    HRESULT CreateClassLinkage(ID3D11ClassLinkage * ppLinkage);
    HRESULT CreateBlendState(const D3D11_BLEND_DESC * pBlendStateDesc, ID3D11BlendState * ppBlendState);
    HRESULT CreateDepthStencilState(const D3D11_DEPTH_STENCIL_DESC * pDepthStencilDesc, ID3D11DepthStencilState * ppDepthStencilState);
    HRESULT CreateRasterizerState(const D3D11_RASTERIZER_DESC * pRasterizerDesc, ID3D11RasterizerState * ppRasterizerState);
    HRESULT CreateSamplerState(const D3D11_SAMPLER_DESC * pSamplerDesc, ID3D11SamplerState * ppSamplerState);
    HRESULT CreateQuery(const D3D11_QUERY_DESC * pQueryDesc, ID3D11Query * ppQuery);
    HRESULT CreatePredicate(const D3D11_QUERY_DESC * pPredicateDesc, ID3D11Predicate * ppPredicate);
    HRESULT CreateCounter(const D3D11_COUNTER_DESC * pCounterDesc, ID3D11Counter * ppCounter);
    HRESULT CreateDeferredContext(UINT ContextFlags, ID3D11DeviceContext * ppDeferredContext);
    HRESULT OpenSharedResource(HANDLE hResource, const IID * ReturnedInterface, void ** ppResource);
    HRESULT CheckFormatSupport(DXGI_FORMAT Format, UINT * pFormatSupport);
    HRESULT CheckMultisampleQualityLevels(DXGI_FORMAT Format, UINT SampleCount, UINT * pNumQualityLevels);
    void CheckCounterInfo(D3D11_COUNTER_INFO * pCounterInfo);
    HRESULT CheckCounter(const D3D11_COUNTER_DESC * pDesc, D3D11_COUNTER_TYPE * pType, UINT * pActiveCounters, LPSTR szName, UINT * pNameLength, LPSTR szUnits, UINT * pUnitsLength, LPSTR szDescription, UINT * pDescriptionLength);
    HRESULT CheckFeatureSupport(D3D11_FEATURE Feature, void * pFeatureSupportData, UINT FeatureSupportDataSize);
    HRESULT GetPrivateData(const GUID * guid, UINT * pDataSize, void * pData);
    HRESULT SetPrivateData(const GUID * guid, UINT DataSize, const void * pData);
    HRESULT SetPrivateDataInterface(const GUID * guid, const IUnknown * pData);
    D3D_FEATURE_LEVEL GetFeatureLevel();
    UINT GetCreationFlags();
    HRESULT GetDeviceRemovedReason();
    void GetImmediateContext(ID3D11DeviceContext * ppImmediateContext);
    HRESULT SetExceptionMode(UINT RaiseFlags);
    UINT GetExceptionMode();
}

enum D3D11_CREATE_DEVICE_FLAG {
    SINGLETHREADED = 0x00000001,
    DEBUG = 0x00000002,
    SWITCH_TO_REF = 0x00000004,
    PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x00000008,
    BGRA_SUPPORT = 0x00000020,
    DEBUGGABLE = 0x00000040,
    PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x00000080,
    DISABLE_GPU_TIMEOUT = 0x00000100,
    VIDEO_SUPPORT = 0x00000800,
}

HRESULT D3D11CreateDevice(IDXGIAdapter  pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL * pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, ID3D11Device * ppDevice, D3D_FEATURE_LEVEL * pFeatureLevel, ID3D11DeviceContext * ppImmediateContext);

HRESULT D3D11CreateDeviceAndSwapChain(IDXGIAdapter  pAdapter, D3D_DRIVER_TYPE DriverType, HMODULE Software, UINT Flags, const D3D_FEATURE_LEVEL * pFeatureLevels, UINT FeatureLevels, UINT SDKVersion, const DXGI_SWAP_CHAIN_DESC * pSwapChainDesc, IDXGISwapChain * ppSwapChain, ID3D11Device * ppDevice, D3D_FEATURE_LEVEL * pFeatureLevel, ID3D11DeviceContext * ppImmediateContext);


}
